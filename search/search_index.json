{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WebDSL","text":"<p>WebDSL is a domain-specific language for developing dynamic web applications with a rich data model, developed and maintained by the Programming Language Group at Delft University of Technology.</p>"},{"location":"background/","title":"Background","text":"<p>This section contains information on the ideas, architecture, and design decisions behind WebDSL. For the WebDSL language reference, see the Reference section.</p>"},{"location":"background/about/","title":"About WebDSL","text":"<p>WebDSL is a domain-specific language for developing dynamic web applications with a rich data model.</p>"},{"location":"background/about/#features","title":"Features","text":"<ul> <li>Domain modeling</li> <li>User interfaces</li> <li>Action code</li> <li>Access control</li> <li>Data validation</li> <li>Ajax</li> <li>Search</li> <li>Email</li> <li>Styling</li> <li>Recurring tasks</li> <li>Java class interface</li> </ul>"},{"location":"background/about/#software","title":"Software","text":"<ul> <li>WebDSL applications are translated to Java web applications.</li> <li>The WebDSL generator is implemented using Stratego/XT, SDF, and Spoofax.</li> <li>IDE support for developing WebDSL applications is provided by the Eclipse plugin.</li> </ul>"},{"location":"background/about/#developers","title":"Developers","text":"<p>WebDSL is being developed by Eelco Visser and Ph.D./M.Sc. students in the context of the Model-Driven Software Evolution project at Delft University of Technology.</p>"},{"location":"background/about/#active-developers","title":"Active developers","text":"<ul> <li>Danny Groenewegen</li> <li>Elmer van Chastelet</li> <li>Daniel A. A. Pelsmaeker</li> <li>Max de Krieger</li> <li>Eelco Visser</li> </ul>"},{"location":"background/about/#non-active-developers","title":"Non-active developers","text":"<ul> <li>Zef Hemel</li> <li>Lennart Kats</li> <li>Sander Vermolen</li> <li>Sander van der Burg</li> <li>Nathan Bruning</li> <li>Chris Gersen</li> <li>Chris Melman</li> <li>Michel Weststrate</li> <li>Jippe Holwerda</li> <li>Ruben Verhaaf</li> <li>Wouter Mouw</li> </ul>"},{"location":"background/meeting-notes/","title":"Meeting Notes","text":"<p>Meeting notes of past WebDSL meetings are documented here.</p>"},{"location":"background/meeting-notes/#webdsl-improvement-meeting-may-2021","title":"WebDSL Improvement Meeting May 2021","text":"<p>The following points were discussed in a WebDSL improvement meeting.</p>"},{"location":"background/meeting-notes/#documentation","title":"Documentation","text":"<ul> <li>A new documentation website using MkDocs Material, organized according to https://documentation.divio.com/.</li> <li>Port all relevant material from the current documentation to the new style and organize accordingly.</li> <li>Introduce a new getting-started guide, inspired by the guide written for the Web Programming Languages course.</li> </ul>"},{"location":"background/meeting-notes/#development-experience","title":"Development Experience","text":"<ul> <li>Finish the WebDSL SDF3 and Statix implementation to provide a new, modernized and robust WebDSL front-end.</li> <li>Modernize the WebDSL back-end: get analysis information in Stratego from a Stratego-Statix API, split up transformation tasks in more modular fashion to prepare for incrementalization.</li> </ul>"},{"location":"background/meeting-notes/#new-language-features","title":"New Language Features","text":"<ul> <li>Introduce more client-side features or constructs in order to maintain WebDSL's consistency when writing interactive web apps.</li> <li>Introduce the notion of transactions in WebDSL in order to better integrate with external services.</li> </ul>"},{"location":"background/meeting-notes/#enhancement-proposals","title":"Enhancement Proposals","text":""},{"location":"background/meeting-notes/#syntax","title":"Syntax","text":"<ul> <li>Add Syntactic sugar for easily usable page routing customization.</li> <li>Reduce Inconsistencies in the existing syntax:<ul> <li>Both <code>.length</code> and <code>.length()</code> are used for different types.</li> <li>Optional semicolons in template code vs. required semicolons in action code.</li> <li>Optional brackets for most definitions (templates and actions) but required brackets when calling an action.</li> <li>Notion of sections is unnecessary.</li> </ul> </li> </ul>"},{"location":"background/meeting-notes/#improve-built-in-functionality","title":"Improve Built-in Functionality","text":"<ul> <li>Improve interoperability of built-in types such as Date/DateTime/Time, Integer/Float/Long and File/Image.</li> <li>Introduce missing built-in inputs: <code>inputajax</code> for <code>Secret</code> and <code>WikiText</code> types.</li> <li>Reduce the effort necessary to delete existing entities that have relations.</li> </ul>"},{"location":"background/meeting-notes/#new-language-constructs","title":"New Language Constructs","text":"<ul> <li>Introduce break/continue for loops and support early returns in services.</li> <li>Introduce conditionals in template attributes.</li> <li>Introduce locally overridable UI attributes.</li> <li>Introduce the notion of middleware that can for example validate or modify incoming requests.</li> </ul>"},{"location":"background/meeting-notes/#lucene-search","title":"Lucene Search","text":"<ul> <li>Support searching for true substrings (*query*).</li> <li>Support the ability to chain search conditions on multiple fields.</li> </ul>"},{"location":"background/meeting-notes/#development-environment","title":"Development Environment","text":"<ul> <li>Introduce a containerized environment to build and run WebDSL apps.</li> <li>Reduce the effort necessary to set up a project due to configuration settings in <code>application.ini</code>. Certain database modes would not work on certain operating systems, the default one has to work on all platforms.</li> </ul>"},{"location":"background/publications/","title":"Publications","text":"<p>All WebDSL publications on researchr.org</p>"},{"location":"howtos/","title":"How-To's","text":"<p>These are some How-To's that help you to get to a specific goal or result with WebDSL. For hands-on tutorials on learning WebDSL, see the Tutorials section. For the WebDSL language reference, see the Reference section.</p>"},{"location":"howtos/#installation-and-build","title":"Installation and Build","text":"<ul> <li>Install WebDSL</li> <li>Install the WebDSL Eclipse Bundle</li> <li>Install the WebDSL Eclipse Plugin Manually</li> <li>Install and Use the WebDSL CLI</li> <li>Update WebDSL</li> </ul>"},{"location":"howtos/install-cli/","title":"Install and Use the WebDSL CLI","text":"<p>Download the WebDSL CLI for your platform:</p> <p> WebDSL CLI</p>"},{"location":"howtos/install-cli/#installation","title":"Installation","text":"<p>An installation of Java 8 or newer and Apache Ant are required.</p> <ol> <li>Extract the zip file.</li> <li>Add the <code>webdsl/bin</code> directory to your <code>$PATH</code>.</li> </ol>"},{"location":"howtos/install-cli/#usage","title":"Usage","text":"<p>Go to the directory of your application and execute:</p> <pre><code>webdsl run appname.app\n</code></pre> <p>This will override any existing <code>application.ini</code> file.</p> <p>This generates an <code>application.ini</code> file configured for testing with an H2 in-memory database.</p> <p>If there is already an <code>application.ini</code> file with configuration (see Application Configuration options), use instead:</p> <pre><code>webdsl run\n</code></pre> <p>Pressing Ctrl+C stops the application.</p> Faster compilation on command-line <p>You can avoid JVM startup overhead by keeping the WebDSL compiler process running.</p> <p>This requires having the Nailgun client installed. For example, on  macOS you can install <code>nailgun</code> using <code>brew install nailgun</code>.</p> <p>Add to the <code>application.ini</code> configuration file of your project the following line to use the compile server for all the commands like <code>webdsl run</code>:</p> <pre><code>usecompileserver=true\n</code></pre> <p>To start the WebDSL nailgun server process, invoke:</p> <pre><code>webdsl start\n</code></pre>"},{"location":"howtos/install-eclipse-bundle/","title":"Install the Eclipse with WebDSL Plugin Bundle","text":"<p>Install an Eclipse instance with the WebDSL plugin pre-installed for your platform:</p> <p> WebDSL in Eclipse bundle</p>"},{"location":"howtos/install-eclipse-bundle/#troubleshooting","title":"Troubleshooting","text":""},{"location":"howtos/install-eclipse-bundle/#macos-eclipse-cannot-be-opened-because-the-developer-could-not-be-verified","title":"macOS: \"Eclipse\" cannot be opened because the developer could not be verified","text":"<p>macOS puts unverified binaries in 'quarantine' and disallows their execution. To remove the <code>com.apple.quarantine</code> attribute, do:</p> <pre><code>xattr -rc Eclipse.app\n</code></pre>"},{"location":"howtos/install-eclipse-bundle/#eclipse-does-not-start-or-complains-about-missing-java","title":"Eclipse does not start, or complains about missing Java","text":"<p>Ensure you have a distribution of Java installed. Then in <code>eclipse.ini</code>, add a <code>-vm</code> line at the top of the file, followed by the path to the Java installation. For example, with SDKMan! on macOS:</p> <pre><code>-vm\n/Users/myusername/.sdkman/candidates/java/current/jre/lib/jli/libjli.dylib\n</code></pre>"},{"location":"howtos/install-eclipse-plugin-manually/","title":"Install the WebDSL Eclipse Plugin","text":"<p>Perform a manual installation of the WebDSL plugin in Eclipse 3.5 or newer.</p> <ol> <li>In Eclipse, go to menu Help \u2192 Install New Software.</li> <li> <p>In the Work with: text area, type:</p> <pre><code>https://update.webdsl.org/update\n</code></pre> </li> <li> <p>Uncheck Group items by category to make the plugin visible.</p> </li> <li>Check WebDSL Editor.</li> <li>Click Install and go through the remaining steps.</li> <li>Restart Eclipse.</li> </ol> <p>It is recommended that the <code>eclipse.ini</code> of Eclipse is updated to give WebDSL enough stack space and memory to function correctly. Include the following options in <code>eclipse.ini</code>, below the line that starts with <code>-vmargs</code>.</p> <pre><code>-Xss8m -Xms256m -Xmx1024m -XX:MaxPermSize=256m -server\n</code></pre> <p>On  macOS this file can be found at <code>Eclipse.app/Contents/MacOS/eclipse.ini</code>.</p>"},{"location":"howtos/install/","title":"Install WebDSL","text":"<p>To get started with WebDSL, install the WebDSL editor and the WebDSL Command-Line interface.</p>"},{"location":"howtos/install/#webdsl-editor","title":"WebDSL Editor","text":"<p>We provide an Eclipse bundle in which you can create and edit WebDSL applications with the assistance of syntax highlighting, static analysis and code completion. Alternatively, you can download the WebDSL plugin in your own Eclipse instance.</p> Recommended: Eclipse Bundle <p>Download an Eclipse instance with the latest WebDSL plugin pre-installed for your platform:</p> <p> WebDSL in Eclipse bundle</p> <p>Installation instructions.</p> Alternative: Eclipse Plugin <p>Perform a manual installation of the WebDSL plugin in Eclipse 3.5 or newer through the update site:</p> <pre><code>https://update.webdsl.org/update\n</code></pre> <p>Installation instructions.</p>"},{"location":"howtos/install/#command-line-interface","title":"Command-Line Interface","text":"<p>The WebDSL CLI transforms your WebDSL code to web applications.</p> Recommended: Download Latest Build <p>Download the WebDSL CLI for your platform:</p> <p> WebDSL CLI</p> <p>Installation instructions.</p> Alternative: Build WebDSL Yourself <p>Clone the WebDSL GitHub repository and follow the instructions listed there.</p> <p>:fontawesome-solid-external-link-alt: WebDSL GitHub Repository</p>"},{"location":"howtos/install/#start-creating-web-applications","title":"Start Creating Web Applications","text":"<p>Once installed and started, you are ready to create web applications with WebDSL. Learn WebDSL by example through our tutorials.</p>"},{"location":"reference/","title":"Reference","text":"<p>This is the WebDSL language reference. For more background information on the ideas, architecture, and design decisions behind WebDSL, see the Background section.</p>"},{"location":"reference/access-control/","title":"Access Control","text":""},{"location":"reference/access-control/#configuration-of-the-principal","title":"Configuration of the Principal","text":"<p>The Access Control sublanguage is supported by a session entity that holds information  regarding the currently logged in user. This session entity is called the securityContext  and is configured as follows:</p> <pre><code>principal is User with credentials name, password\n</code></pre> <p>This states that the User entity will be the entity representing a logged in user. The credentials are not used in the current implementation (the idea is to derive a default  login template). The resulting generated session entity will be:</p> <pre><code>session securityContext\n{\n  principal : User\n  loggedIn  : Bool := this.principal != null\n}\n</code></pre> <p>Note that this principal declaration is used to enable access control in the application.</p> <p>It will also generate <code>authentication()</code> (both login and logout), <code>login()</code>, and <code>logout()</code> templates, and an <code>authenticate</code> function that takes the credentials as arguments and, if they are correct, returns true and sets the principal (only String/Email/Secret-type credential properties are allowed).</p>"},{"location":"reference/access-control/#authentication","title":"Authentication","text":"<p>Authentication can be added manually, instead of using the generated authentication templates. Here is a small example application with custom authentication:</p> <pre><code> principal is User with credentials name, password\n\nentity User {\n  name : String\n  password : Secret\n}\n\ntemplate login {\n  var username := \"\"\n  var password : Secret := \"\"\n\n  form { \n    label(\"Name: \"){ input(username) }\n    label(\"Password: \"){ input(password) }\n    captcha()\n    submit login() { \"Log In\" }\n  }\n\n  action login(){\n    validate(authenticate(username,password), \n      \"The login credentials are not valid.\");\n    message(\"You are now logged in.\");\n  }\n}\n\ntemplate logout {\n  \"Logged in as \" output(securityContext.principal)\n  form{\n    submitlink logout() {\"Log Out\"}\n  }\n  action logout(){\n    securityContext.principal := null;\n  }\n}\n\npage root {\n  login()\n  \" \"\n  logout()\n}\n\ninit {\n  var u1 : User := \n    User{ name := \"test\" password := (\"test\" as Secret).digest() };\n  u1.save();\n}\n\naccess control rules\n\n  rule page root(){\n    true\n  }\n</code></pre> <p>When storing a secret property you need to create a digest of it: <pre><code>  newUser.password := newUser.password.digest();\n</code></pre> This makes sure the secret property is stored encrypted. A digest can be compared with an entered string using the check method: <pre><code>  us.password.check(enteredpassword)\n</code></pre></p>"},{"location":"reference/access-control/#protecting-resources","title":"Protecting Resources","text":"<p>The default policy is to deny access to all pages and ajax templates, the rules determine what the conditions for allowing access are. Regular templates are accessible by default, however, you can add additional access control rules on templates to limit their accessibility.</p> <p>A simple rule protecting the editUser page to be only accessable by the user being edited looks like this: <pre><code>access control rules\n\n  rule page editUser(u:User){\n    u == principal     \n  }\n</code></pre> An analysis of this rule:</p> <ul> <li>access control rules: a rules section is started with this declaration, multiple rules can follow. To go back to a normal section, use <code>section some description</code>.</li> <li>rule: A keyword for Access Control rules</li> <li>page: The type of resource being protected here, all the types available   in the Access Control DSL for WebDSL are: page, action, template, function. The rules    on pages protect the viewing of pages, action rules protect the execution of actions,    template rules determine whether a template is visible in the including page, and finally    rules on functions are lifted to the action invoking the function.</li> <li>editUser: The name of the resource the rule will apply to.</li> <li>(u:User): The arguments (if any) of the resource, the types of the   arguments are used when matching. This also specifies what variables can be   used in the checks.</li> <li>u = principal: the check that determines whether access to   this resource is allowed, this check is typechecked to be a correct boolean   expression. The use of principal implies that the   securityContext is not null and the user is logged in (these extra checks are   generated automatically).</li> </ul> <p>Matching can be done a bit more freely using a trailing * as  wildcard character, both in resource name and arguments: <pre><code>rule page viewUs*(*){\n  true\n}\n</code></pre></p> <p>When more fine-grained control is needed for rules, it is possible to specify  nested rules. This implies that the nested rule is only valid for usage of that  resource inside the parent resource. The allowed combinations are page - action,  template - action, page - template. The next example shows nested rules for actions in a page: <pre><code>  rule page editDocument(d:Document){\n    d.author == principal\n    rule action save(){\n      d.author == principal\n    }\n    rule action cancel(){\n      d.author == principal\n    }      \n  }\n</code></pre></p> <p>This flexibility is often not necessary, and it is also inconvenient having to explicitly allow all the actions on the page, for these reasons some extra desugaring rules were added. When specifying a check on a page or template without nested checks, a generic action rules block with the same check is added to it by default. For example: <pre><code>  rule page editDocument(d:Document){\n    d.author == principal     \n  }\n</code></pre> becomes <pre><code>  rule page editDocument(d:Document){\n    d.author == principal\n    rule action *(*)\n    {\n      d.author == principal\n    }    \n  }\n</code></pre></p>"},{"location":"reference/access-control/#reuse-in-access-control-rules","title":"Reuse in Access Control rules","text":"<p>Predicates are functions consisting of one boolean  expression, which allows reusing complicated expressions, or simply giving better structure to the policy implementation. An example of a predicate: <pre><code>  predicate mayViewDocument (u:User, d:Document){\n    d.author == principal\n    || u in d.allowedUsers\n  }\n  rule page viewDocument(d:Document){\n    mayViewDocument(principal,d)\n  }\n  rule page showDocument(d:Document){\n    mayViewDocument(principal,d)\n  }\n</code></pre></p>"},{"location":"reference/access-control/#inferring-visibility","title":"Inferring Visibility","text":"<p>A disabled page or action redirects to a very simple page stating access denied. Since this is not very user friendly, the visibility of navigate links and action  buttons/links are automatically made conditional using the same check as the corresponding resource. An example conditional navigate: <pre><code>if(mayViewDocument(securityContext.principal,d)){\n  navigate(viewDocument(d)){ \"view \" output(d.title) } \n}\n</code></pre></p> <p>When using conditional forms it is often more convenient to put the form in a template,  and control the visibility by a rule on the template.</p>"},{"location":"reference/access-control/#using-entities","title":"Using Entities","text":"<p>Access Control policies that rely on extra data can create new or extend existing properties.  An example of extending an entity is adding a set of users property to a document representing  the users allowed access to that document: <pre><code>  extend entity Document{\n    allowedUsers : {User}\n  }\n</code></pre></p>"},{"location":"reference/access-control/#administration-of-access-control","title":"Administration of Access Control","text":"<p>Administration of Access Control in WebDSL is done by the normal WebDSL page definitions. All the data of the Access Control policy is integrated into the WebDSL application. An option is to incorporate the administration into an existing page with a template. This example illustrates the use of a template for administration: <pre><code>  template allowedUsersRow(document:Document){\n    row{ \"Allowed Users:\" input(document.allowedUsers) }\n  }\n</code></pre> The template call for this template is added to the editDocument page: <pre><code>  table{\n    row{ \"Title:\" input(document.title) }\n    row{ \"Text:\" input(document.text) }\n    row{ \"Author:\" input(document.author) }  \n    allowedUsersRow(document)\n  }\n</code></pre> By using a template the Access Control can be disabled easily by not  including the access control definitions and the template. The unresolved template definitions will give a warning but the page will generate normally and ignore the template call.</p>"},{"location":"reference/access-control/#minimal-access-control-example","title":"Minimal Access Control Example","text":"<pre><code>application minimalac\n\n  entity User {\n    name : String\n    password : Secret\n  }\n\n  init {\n    var u := User{ name := \"1\" password := (\"1\" as Secret).digest()  };\n    u.save();\n  }\n\n  page root {\n    authentication()\n    \" \"\n    navigate protectedPage() { \"go\" }\n  }\n\n  page protectedPage { \"access granted\" }\n\n  principal is User with credentials name, password\n\n  access control rules\n\n    rule page root(){true}\n    rule page protectedPage(){loggedIn()}\n</code></pre>"},{"location":"reference/action-code/","title":"Action Code","text":"<p>This section describes the expressions and statements available in WebDSL.</p>"},{"location":"reference/action-code/#expressions","title":"Expressions","text":"<p>literals A number of literals are supported:</p> <ul> <li>Strings: <code>\"This is a string\"</code></li> <li>Ints: <code>22</code></li> <li>Float: <code>8.3</code></li> <li>Boolean: <code>true</code>/<code>false</code></li> <li>List: <code>[&lt;expression&gt;, &lt;expression&gt;, ...]</code></li> <li>Empty list: <code>List&lt;Int&gt;()</code></li> <li>Set: <code>{&lt;expression&gt;, &lt;expression&gt;, ...}</code></li> <li>Empty set: <code>Set&lt;Int&gt;()</code></li> <li>Null: <code>null</code></li> </ul> <p>operators The following operators are supported:</p> <ul> <li>Addition (numeric types) and string concatenation: <code>+</code></li> <li>Subtraction (numeric types): <code>-</code></li> <li>Multiplication (numeric types): <code>*</code></li> <li>Division (numeric types): <code>/</code></li> <li>Modulus (integer type): <code>%</code></li> <li>Casting (casts a variable as one of another type): <code>as</code> (example: <code>8 as Float</code>)</li> </ul> <p>binary operators </p> <ul> <li>Equality: <code>==</code></li> <li>Inequality: <code>!=</code></li> <li>Bigger than: <code>&gt;</code></li> <li>Bigger than or equal to: <code>&gt;=</code></li> <li>Smaller than: <code>&lt;</code></li> <li>Smaller than or equal to: <code>&lt;=</code></li> <li>Instance of: <code>is a</code> (checks if a certain expression is of a certain runtime type)</li> <li>Contained in collection: <code>in</code> (checks if a certain expression is contained in a collection)</li> <li>and: <code>&amp;&amp;</code></li> <li>or: <code>||</code></li> <li>not: <code>!</code></li> </ul> <p>Example:</p> <pre><code>if(!(b is a String) &amp;&amp; (b in [8, 5] || b + 3 = 7)) {\n   // ...\n}\n</code></pre> <p>variables Variables can be accessed by use of their identifiers and their properties using the . notation. Example: <code>person.lastName</code></p> <p>indexed access List elements can be retrieved and assigned using index access syntax: </p> <pre><code>var a := list[0]; \nlist[2] := \"test\";\n</code></pre>"},{"location":"reference/action-code/#functions","title":"Functions","text":"<p>Functions can be defined globally and as methods in entities:</p> <pre><code>function sayHello(to : String) : String {\n  return \"Hello, \" + to;\n}\n\nentity User {\n  name : String\n\n  function showName() : String {\n    return sayHello(name + \"!\");\n  }\n}\n</code></pre> <p>As of August 2016, entity functions without arguments can also be preceded with the <code>cache</code> keyword. This cache operates at the request level, i.e. it only calculates its value once per request. This is useful for cases where a more expensive function is repeatedly invoked (e.g. for access control).</p> <pre><code>entity SubForum {\n  name : String\n  managers : [User]\n  ...\n\n  cached function isManager() : String {\n    return loggedIn() \n        &amp;&amp; ( principal() in managers || parentForum.isManager() )\n  }\n}\n</code></pre>"},{"location":"reference/action-code/#variable-declaration","title":"Variable Declaration","text":"<p>Variables can be defined globally, in pages (see Page Variables, and in code blocks.</p> <p>Syntax:</p> <pre><code>var &lt;identifier&gt; : &lt;Sort&gt;;\n</code></pre> <p>This defines a variable within the current scope with name identifier and type Sort.</p> <p>Variable declarations can also have an expression that initializes the value:</p> <pre><code>var &lt;identifier&gt; [: &lt;Sort&gt;] := expression;\n</code></pre> <p>The sort is optional in this case, if the Sort is not declared, the var will receive the type resulting from the expression (also known as local type inference).</p> <p>Global variables always need an expression for initialization, they are added to the database once (when the first page is loaded, the database is checked to see whether all global vars have been created already). Global variables can be edited, but removing them can cause problems when there are explicit references to those variables.</p> <p>Global variables can be further initialized using a global init{} block, e.g.</p> <pre><code>var defaultUser := User{ name := \"default\" }\ninit {\n  defaultUser.someInitializeFunction();\n}\npage root {\n  output(defaultUser.name)\n}\n</code></pre> <p>Global inits are also performed only once after database creation (if the dbmode is create-drop each new deploy will recreate the globals and execute inits, see App Configuration.</p> <p>The ; is optional for global and page variable declarations.</p>"},{"location":"reference/action-code/#assignment","title":"Assignment","text":"<p>The syntax of an assignment:</p> <pre><code>&lt;variable&gt; := &lt;value expression&gt;;\n</code></pre> <p>Example:</p> <pre><code>p.lastName := \"Doe\";\n</code></pre>"},{"location":"reference/action-code/#return","title":"Return","text":"<p>Syntax:</p> <pre><code>return &lt;expression&gt;;\n</code></pre> <p>Example:</p> <pre><code>function test() : String{\n  return p.lastName;\n}\n</code></pre> <p>In the context of a entity function this returns the expression as the result of that function. In the context of an action or page init definition, it redirects the user to the page specified in the expression.</p> <p>Example:</p> <pre><code>action done() { return root(); }\n</code></pre>"},{"location":"reference/action-code/#for-loop","title":"For-loop","text":"<p>Iterating a collection of entities or primitives can be done using a for loop. There are three types of for loop statements:</p> <p>For</p> <p>This type of for loop iterates the collection produced by expression e, which must contain elements of type t. The elements in the collection are accessible through identifier id.</p> <p>The collection can be filtered:</p> <pre><code>    for (id:t in e) { stat* }\n    for (id:t in e filter) { stat* }\n</code></pre> <p>ForAll</p> <p>This for loop iterates all the entities in the database of type t. These can also be filtered. Note that it is more efficient to retrieve the objects using a filtering query and use the regular for loop above for iteration. </p> <pre><code>    for (id:t) { stat* }\n    for (id:t filter) { stat* }\n</code></pre> <p>For Count</p> <p>This for loop iterates the numbers from e1 to e2-1.</p> <pre><code>    for (id:Int from e1 to e2) { stat* }\n</code></pre> <p>For-loop Filter</p> <p>The filter part of a for loop can consist of four parts:</p> <p>Where</p> <pre><code>    where e1\n</code></pre> <p>e1 is a boolean expression which needs to evaluate to true for the element to be iterated.</p> <p>Order By</p> <pre><code>    order by e2 asc/desc\n</code></pre> <p>e2 is an expression that needs to produce a primitive type such as String or Int, which will be used to order the elements ascending or descending.</p> <p>Limit</p> <pre><code>    limit e3\n</code></pre> <p>e3 is an Int expression which will limit the number of elements that get iterated.</p> <p>Offset</p> <pre><code>    offset e4\n</code></pre> <p>e4 is an Int expression which will offset the starting element of the iteration.</p> <p>Each of the four parts is optional, but they have to be specified in this order. The filtering is done in the application, so use queries instead of filters to optimize the WebDSL application.</p>"},{"location":"reference/action-code/#list-comprehension","title":"List Comprehension","text":"<p>List comprehensions are a combination of mapping, filtering and sorting. </p> <pre><code>[ e1 | id : t in e2 ]\n</code></pre> <p>e2 produces a collection of elements with type t, e1 is an expression that allows transformation of the elements using identifier id.</p> <p>Filters are also allowed:</p> <pre><code>[ e1 | id : t in e2 filter ]\n</code></pre> <p>Example:</p> <pre><code>[e.title | e : BlogEntry in b.entries \n           where e.created &gt; date \n           order by e.created desc]\n</code></pre> <p>This expression returns all titles (e.title) from b.entries where the time created (e.created) is greater than a certain date, ordered by e.created in descending order. Both the where and order by clauses are optional. An ordering is either ascending (asc) or descending (desc).</p> <p>Conjunction</p> <pre><code>And [ e1 | id : t in e2 ]\n</code></pre> <p>If e1 produces a boolean, the list comprehension can be preceded by \"And\" to create the conjunction of the elements produced by the list comprehension.</p> <p>Disjunction</p> <pre><code>Or [ e1 | id : t in e2 ]\n</code></pre> <p>If e1 produces a boolean, the list comprehension can be preceded by \"Or\" to create the disjunction of the elements produced by the list comprehension.</p>"},{"location":"reference/action-code/#while-statement","title":"While Statement","text":"<p>Besides for loops, iteration can also be performed using the while statement.</p> <pre><code>    while (e) { stat* }\n</code></pre> <p>This will repeat stat* while e evaluates to true.</p>"},{"location":"reference/action-code/#switch-statement","title":"Switch Statement","text":"<p>The case-statement has the following syntax:</p> <pre><code>case (&lt;expression&gt;) {\n  [case &lt;expr-1&gt; {\n    &lt;block executed if true&gt;\n  }] *\n  [default {\n    &lt;block executed if no cases match&gt;\n  }]\n}&lt;/verbatim&gt;\n</code></pre> <p>Any number of cases and optionally one default case can be specified.</p> <p>Example:</p> <pre><code>case (formatNumber) {\n  1 {\n    // format is one\n  }\n  2 {\n    // format is two\n  }\n  default {\n    // format is neither one nor two\n  }\n}\n</code></pre>"},{"location":"reference/action-code/#regular-expressions-regex","title":"Regular Expressions / Regex","text":"<p>Examples in codefinder</p>"},{"location":"reference/action-code/#render-template-to-string","title":"Render Template to String","text":"<p>The <code>rendertemplate</code> function can be used to render template contents to a String.</p> <pre><code>rendertemplate(TemplateCall):String\n</code></pre> <p>Example:</p> <pre><code>template test(a:Int){ output(a) \"!\" }\nfunction showContent(i:Int){\n  log(rendertemplate(test(i)));\n}\n</code></pre>"},{"location":"reference/advanced-search/","title":"Advanced Search","text":"<p>note: Some syntax changes and additional features are expected for WebDSL 1.3.0. The search language will become more structured. This manual will be updated/completed upon 1.3.0 release</p> <p>WebDSL offers full text search engine capabilities based on Apache Lucene and Hibernate Search. Current implementation supports:</p> <ul> <li>Set up which entity properties are searchable</li> <li>Full text search on (a subset of) searchable entity properties</li> <li>Range queries (numeric and date properties)</li> <li>Boolean queries </li> <li>Faceted search (both discrete values and ranges) </li> <li>Index and query time boosting</li> <li>Customized preprocessing of searchable properties/queries using SORL analyzer building blocks (tokenizers, character and token filters):</li> <li>Common analyzers are predefined</li> <li>Use custom stop words that are ignored at indexing/querying</li> <li>Get more relevant results by<ul> <li>Synonym analyzer (ipad i-pad i pad all match the same)</li> <li>Stem words to their root word (performing -&gt; perform)</li> <li>Phonetic search (words that sound similar are matched)</li> </ul> </li> <li>Many more</li> <li>Filter search results by property value or faceted search</li> <li>Sort search results</li> <li>Pagination of search results</li> <li>Result highlighting</li> <li>Spell checking</li> <li>Auto completion</li> <li>Create search name spaces based on property value</li> </ul>"},{"location":"reference/advanced-search/#making-your-data-searchable","title":"Making your data searchable","text":"<p>Using search in WebDSL starts by marking which entities need to be searchable. If one property is marked searchable, the entity can be searched. For each entity property one or more search fields can be specified. There are 2 ways to specify these: using search mappings or using searchable annotations. For simple search functionality, searchable annotations will suffice, but for cleaner code we recommend using search mappings.</p>"},{"location":"reference/advanced-search/#using-search-mappings-recommended","title":"Using search mappings (recommended)","text":"<p>A search mapping starts with the name of the property to be indexed, optionally followed by mapping specifications:</p>"},{"location":"reference/advanced-search/#as-name","title":"as <code>name</code>","text":"<p>Override the default search field <code>name</code>. Default: property name</p>"},{"location":"reference/advanced-search/#using-analyzer","title":"using <code>analyzer</code>","text":"<p>Indexed using analyzer <code>analyzer</code> instead of the default analyzer.</p>"},{"location":"reference/advanced-search/#boosted-to-floatfloat","title":"boosted to <code>Float</code>|^<code>Float</code>","text":"<p>Search field is boosted to <code>Float</code> at index time (default 1.0).</p>"},{"location":"reference/advanced-search/#spellcheckautocompletespellcheckautocomplete","title":"(spellcheck)|(autocomplete)|(spellcheck,autocomplete)","text":"<p>Indicate that this search field can be used for spell checking/autocompletion.</p>"},{"location":"reference/advanced-search/#for-subclass-entity","title":"for subclass <code>entity</code>","text":"<p>In case marking an reference/composite property as searchable, you might want to make only a specific subclass of the property type searchable.</p>"},{"location":"reference/advanced-search/#depth-intwith-depth-int","title":"depth <code>Int</code>|with depth <code>Int</code>","text":"<p>In case marking an reference/composite property as searchable, you can specify the depth of the 'embedded' path, 1 is the default.</p>"},{"location":"reference/advanced-search/#mapping-specification","title":"+ <code>mapping specification</code>","text":"<p>Prefix a <code>mapping specification</code> with the plus sign if you want this search field to be used by default at query time. If no default search field is specified, all search fields are used by default.</p> <p>Search mappings belong to an entity and can be placed inside an entity declaration, or somewhere else by adding the entity name. Names of the search fields are scoped to entities, so different entities may share the same names for search fields.</p> <pre><code>// Embedded search mapping\nentity Message {\n  subject  : String\n  text     : Text\n  category : String\n  sender   : User\n\n  search mapping {\n    +subject\n    +text using snowballporter as textSnowBall\n    text\n    category\n    +sender for subclass ForumUser\n  }\n}\n</code></pre> <pre><code>// External search mapping\nentity ForumUser : User {\n  forumName : String\n  forumPwd  : Secret\n  messages  : {Message} (inverse=Message.sender)\n}\n...\nsearch mapping ForumUser {\n  forumName using none\n}\n</code></pre>"},{"location":"reference/advanced-search/#using-annotations","title":"Using annotations","text":"<p>Search fields can also be specified using property annotations: <pre><code>// Using searchable annotations\nentity Message {\n  subject  : String (searchable)\n  text     : Text (searchable, searchable(name=textSnowBall, analyzer=snowballporter)\n  category : String (searchable)\n  sender   : ForumUser (searchable())\n}\n</code></pre></p> <p>The above code marks the entity <code>Message</code> searchable, and it has 3 search fields: <code>subject</code>, <code>text</code> using the default analyzer, and <code>textSnowball</code>, which uses the snowball porter analyzer. Searchable annotations have no restriction w.r.t. search mappings, and both can be used interchangeably (not recommended since it's less transparent). The following table shows the annotation equivalent of specifications in search mappings.</p> search mapping &lt;-&gt; searchable annotation <sub>subject</sub> &lt;-&gt; <sub>searchablesearchable()</sub> <sub>subject as sbj</sub> &lt;-&gt; <sub>searchable(name = sbj)</sub> <sub>subject using defaultNoStop</sub> &lt;-&gt; <sub>searchable(analyzer = defaultNoStop)</sub> <sub>subject^2.0</sub> &lt;-&gt; <sub>searchable()^2.0</sub> <sub>subject boosted to 2.0</sub> &lt;-&gt; <sub>searchable(boost = 2.0)</sub> <sub>subject as sbjTriGram using trigram boosted to 0.5</sub> &lt;-&gt; <sub>searchable(analyzer = trigram, name = sbjTriGram)^0.5</sub> <sub>subject as sbjUntokenized using none</sub> &lt;-&gt; <sub>searchable(analyzer = none, name = sbjUntokenized)</sub> <sub>message as sbjAC using kwAnalyzer (autocomplete)</sub> &lt;-&gt; <sub>searchable(analyzer = kwAnalyzer, name = sbjAC, autocomplete)</sub> <sub>user as forumuser for subclass ForumUser</sub> &lt;-&gt; <sub>searchable(name = forumuser, subclass = ForumUser)</sub> <sub>user with depth 2</sub> &lt;-&gt; <sub>searchable(depth=2)</sub> <sub>+ text as txt</sub> &lt;-&gt; <sub>searchable(name = txt, default)</sub>"},{"location":"reference/advanced-search/#which-properties-can-be-made-searchable","title":"Which properties can be made searchable ?","text":"<p>Properties of any type can be made searchable, although there are some notes to make.</p>"},{"location":"reference/advanced-search/#reference-and-composite-properties","title":"Reference and composite properties","text":"<p>These properties don't contain any text or value by themselves, but hold references to other entities. Therefore, the properties themselves cannot be indexed, but the searchable properties of the referred entity/entities will be indexed in the scope of the current entity. For example if you want to be able to search for <code>Message</code> entities by the name of the sender (in the above example), the property <code>forumName</code> of <code>ForumUser</code> needs to be indexed in the scope of <code>Message</code>. This can be done by marking the <code>sender</code> property as searchable. All search fields from <code>ForumUser</code> will then be available for <code>Message</code>, and searchfields are prefixed with '<code>propertyName.</code>' by default (or different name if specified using <code>as</code> in search mappings). The search field from the example becomes :  <code>sender.forumName</code>. </p> <p>Note: Searchable reference/composite properties need to be part of an inverse relation to keep the index of the owning entity updated with changes in its reference entity/entities. The mapping options available for reference properties are restricted to <code>name</code> and <code>subclass</code>.</p>"},{"location":"reference/advanced-search/#numeric-properties-floatintdatedatetimetime","title":"Numeric properties (Float,Int,Date,DateTime,Time)","text":"<p>In case no analyzer is specified for a numeric property search field, it will be indexed as numeric fields, which is a special type of field in Lucene. It enables efficient range queries and sorting on this field.</p>"},{"location":"reference/advanced-search/#derived-properties","title":"Derived properties","text":"<p>Derived properties are currently only indexed when the entity owning this property is saved/changed.</p>"},{"location":"reference/advanced-search/#how-to-analyze-your-dataqueries","title":"How to analyze your data/queries","text":"<p>By default, textual properties will use the default analyzer from Lucene, which is optimized for the English language. In the specification of a search field (in search mapping or searchable annotation), a different analyzer can be assigned to it like is done for the <code>textSnowBall</code> search field. A custom analyzers can be declared, each containing:</p> <ul> <li>zero or more character filters</li> <li>one tokenizer</li> <li>zero or more token filters</li> </ul> <p>The range of tokenizers and filters that are supported can be found here and here (with more information about specific analyzers). You don't need to use the factory keyword at the end. Useful analyzers definitions are already included in a new WebDSL project under ./search/searchconfiguration.app. The default analyzer can be overwritten by adding the <code>default</code> keyword before <code>analyzer</code>. More advanced analysis may require different behavior at search and query time. Using the <code>index { ... }</code> and <code>query { ... }</code> block, the analyzers may be specified different for indexing and query time (see the synonym analyzer).</p>"},{"location":"reference/advanced-search/#searching-the-data","title":"Searching the data!","text":"<p>For each indexed entity, search functions and a searcher class are automatically generated. For simple searches, the generated functions will suffice. For more advanced searches, the magic is in the generated entity searcher(s).</p>"},{"location":"reference/advanced-search/#search-data-using-generated-search-functions","title":"Search data using generated search functions","text":"<p>For the example entity <code>Message</code>, the following search functions are generated. <pre><code>function searchMessage(query : String) : [Message]\nfunction searchMessage(query : String, limit : Int) : [Message]\nfunction searchMessage(query : String, limit : Int, offset : Int) : [Message]\n</code></pre> The limit and offset parameters can be used for paginated results. It only loads at most the <code>limit</code> number of results from the database (for efficiency/faster pageloading). These functions use the default search fields when searching, and the specified analyzers are applied for each search field.</p>"},{"location":"reference/advanced-search/#search-data-using-webdsl-search-language-for-full-text-search","title":"Search data using WebDSL search language for full text search","text":"<p>More features are available when using WebDSL's search language designed to perform search operations. The language let you interact with the generated Searcher object for the targeted entity. A reference to (or initialization of) a searcher is followed by one or more constructs in which search criteria can be declared.</p> <pre><code>//matches Messages with \"tablet\", but without \"ipad\"\nvar msgSearcher := search Message matching +\"tablet\", -\"ipad\";\n\n//enable faceting on an existing searcher\nmsgSearcher := ~msgSearcher with facets sender.forumName(20), category(10)\n</code></pre> <p>List of search language constructs:</p>"},{"location":"reference/advanced-search/#retrieving-search-results","title":"Retrieving search results","text":"<p><pre><code>var searcher := search Book matching author: \"dahl\";\nvar results := searcher.results(); //returns [Book];\n</code></pre> Calling .results() on a searcher returns the search results. Calling .count() on a searcher returns the total number of results.</p>"},{"location":"reference/advanced-search/#simple-and-boolean-queries-matching-field-qexp","title":"Simple and boolean queries: 'matching { [{field ,}:] {qExp ,} ,}'","text":"<p><pre><code>searcher := search Entity matching title: \"user interface\";\nsearcher := search Entity matching title, description: userQuery; \nsearcher := search Entity matching \"user interface\";\nsearcher := search Entity matching title: +userQuery, -\"case study\"; \nsearcher := search Entity matching ranking:4 to 5, title:-\"language\"; \n</code></pre> Declares a searcher that matches a simple or boolean query. Fields are optional: if the query expression is not preceded by a field constraint, the default search fields are used (i.e. all search fields if no default fields are defined, see ...). qExp can be any String compatible WebDSL expression or a range expression optionally prefixed with a boolean operator (+ for must, - for mustnot, nothing for should).</p>"},{"location":"reference/advanced-search/#range-queries","title":"Range queries","text":"<p><pre><code>searcher := search Entity matching rating: {1 to 3}\nsearcher := search Entity matching rating: [startDate to endDate]\nsearcher := search Entity matching rating: -[* to sinceDate]\n</code></pre> Range expressions are in the form [minExp to maxExp] (including min and max value) or {minExp to maxExp} (exludes min and max, where both expressions can be any expression of a simple WebDSL builtin type. An open range is specified with an asterisk : [* to \"A\"} for example.</p>"},{"location":"reference/advanced-search/#pagination","title":"Pagination","text":"<p><pre><code>var searcher := search Book matching author: \"dahl\" start 20 limit 10\n</code></pre> With the start and limit keywords, you can control which results to be retrieved.</p>"},{"location":"reference/advanced-search/#configuration-options-option","title":"Configuration options: '[ {option* ,} ]'","text":"<p><pre><code>searcher := search Entity on title: q [no lucene, strict matching];\n</code></pre> Declare the searcher's options. Available options are:</p> <ul> <li>lucene: allow lucene query syntax</li> <li>no lucene: disallow lucene query syntax</li> <li>strict matching: all terms must match by default</li> <li>loose matching: at least one term should match by default</li> </ul>"},{"location":"reference/advanced-search/#filtering-with-filters-filterconstraint","title":"Filtering: 'with filter(s) {filterconstraint* ,}'","text":"<p><pre><code>searcher := search Entity matching title: \"graph\" \n                          with filter hidden:false;\n</code></pre> Specify a filter constraint. A filter constraint is a field-value expression. Be aware that when using a filter, a bitset is constructed and cached to accelerate future queries using the same filter. Filters are not considered in result ranking. Thus, only use field-value filters if you expect the same filtering to occur frequently.</p>"},{"location":"reference/advanced-search/#enabling-facets-with-facets-field1e1-field2e2","title":"Enabling facets: 'with facet(s) field1(e1), field2(e2)'","text":"<p>Example: <pre><code>searcher := search Entity matching title: \"graph\" with facet author(10);\nsearcher := search Entity matching title: \"graph\" with facets author(10), rating([* to 1],[2 to 3},[3 to 4},[4 to *]);\n</code></pre> Specify enabled facets. These can be discrete or range facets</p>"},{"location":"reference/advanced-search/#retrieving-facets-field-facets-from-searcherexp","title":"Retrieving facets: 'field facets from searcherExp'","text":"<p><pre><code>facets := author facets from s;\n</code></pre> Returns a list: <code>[Facet]</code> with the facets for the specified field. Facet objects have the following boolean functions available, for example to apply different styling on the variety of facet states:</p> <ul> <li>f.isSelected(): is this facet selected, i.e. filtered?</li> <li>f.isMust(), f.isShould(), f.isMustNot(): check the filter behaviour of this facet.</li> </ul>"},{"location":"reference/advanced-search/#filtering-on-facet","title":"Filtering on facet","text":"<p><pre><code>searcher := ~searcher with filter(s) selectedDateFacet.must(), selectedPriceFacet.must();\n</code></pre> Previously returned facets can be used to narrow the search results. The behaviour of the facet (must, should, mustnot) can be set on the facet object itself (should by default).</p>"},{"location":"reference/advanced-search/#namespace-scoping-in-namespace-e1","title":"Namespace scoping: 'in namespace e1'","text":"<p><pre><code>searcher := search Entity matching title: \"graph\" in namespace \"science\";\n</code></pre> When using search namespaces, restricting a search to a single namespace is done using the in namespace construct followed by a String-compatible expression.</p>"},{"location":"reference/advanced-search/#search-data-using-native-java-instead-of-search-language-some-expert-features","title":"Search data using native java instead of search language (some expert features)","text":"<p>The searcher class that is created for the example <code>Message</code> entity is <code>MessageSearcher</code>. The first advantage of using this searcher instead of the generated functions is the ability to interact with the searcher, for further refinements to the search query, or to get information like the total number of results, or time that was needed to perform the search. <pre><code>page searchPage(query : String) {\n  var searcher := MessageSearcher().query(query);\n  var results := searcher.results();\n  var searchTime := searcher.searchTime(); //String\n\n \"You searched for '\" output(searcher.query()) \"', \" output(searcher.count()) \" results found in \" output(searchTime) \".\"\n\n  if(searcher.count() &gt; 0) {\n    showResults(results)\n  }\n}\ntemplate showResults(results : [Message]) {\n  //code to view results\n}   \n</code></pre></p> <p>The available searcher functions generated for each searchable entity are:</p>"},{"location":"reference/advanced-search/#disallow-use-of-lucene-in-query-and-filter-values","title":"(Dis)Allow use of Lucene in query and filter values","text":"<p>(see here) <pre><code>allowLuceneSyntax(allow : Bool) : EntitySearcher\n</code></pre></p>"},{"location":"reference/advanced-search/#orand-terms-in-user-queries-by-default","title":"OR/AND terms in user queries by default","text":"<p>OR is the default. <pre><code>defaultAnd() : EntitySearcher\ndefaultOr() : EntitySearcher\n</code></pre></p>"},{"location":"reference/advanced-search/#filter-results-by-field-value-get-filter-value","title":"Filter results by field value, get filter value","text":"<pre><code>addFieldFilter(field : String, value : String) : EntitySearcher\ngetFieldFilterValue(field : String) : String\ngetFilteredFields() : [String]\nremoveFieldFilter(field : String)\nclearFieldFilters()\n</code></pre>"},{"location":"reference/advanced-search/#get-spellautocomplete-suggestions","title":"Get spell/autocomplete suggestions","text":"<p>The field(s) parameters specify which search field(s) to use for suggestions. 'limit' controls the max number of suggestions to retrieve. Additionally the namespace can be specified, if used. For spell suggestions the accuracy [0..1] can be set <pre><code>static autoCompleteSuggest(toComplete : String, field : String, limit : Int) : [String]\nstatic autoCompleteSuggest(toComplete : String, namespace : String, field : String, limit : Int) : [String]\nstatic autoCompleteSuggest(toComplete : String, fields : [String], limit : Int) : [String]\nstatic autoCompleteSuggest(toComplete : String, namespace : String, fields : [String], limit : Int) : [String]\nstatic spellSuggest(toCorrect : String, fields : [String], accuracy : Float, limit : Int) : [String]\nstatic spellSuggest(toCorrect : String, namespace : String, fields : [String], accuracy : Float, limit : Int) : [String]\nstatic spellSuggest(toCorrect : String, field : String, accuracy : Float, limit : Int) : [String]\nstatic spellSuggest(toCorrect : String, namespace : String, field : String, accuracy : Float, limit : Int) : [String]\n</code></pre></p>"},{"location":"reference/advanced-search/#indecrease-the-impact-of-a-search-field-in-ranking-of-results-by-boosting-at-query-time","title":"In/Decrease the impact of a search field in ranking of results by boosting at query-time","text":"<pre><code>boost(field : String, boost : Float) : EntitySearcher\n</code></pre>"},{"location":"reference/advanced-search/#faceting-on-a-search-field","title":"Faceting on a search field","text":"<p>The <code>max</code> parameter defines the maximum facets to collect for that field. For range facets, the ranges are encoded as String in the same format as range queries. Multiple ranges can be specified concatenated, optionally seperated with a symbol like white space or comma but that's not required.\"</p> <pre><code>enableFaceting(field : String, max : Int) : EntitySearcher\nenableFaceting(field : String, rangesAsString : String) : EntitySearcher\ngetFacets(field : String) : [Facet]\naddFacetSelection(facet : Facet) : EntitySearcher\naddFacetSelection(facets : [Facet]) : EntitySearcher\ngetFacetSelection() : [Facet]\ngetFacetSelection(field : String) : [Facet]\nremoveFacetSelection(facet : Facet) : EntitySearcher\nclearFacetSelection() : EntitySearcher\nclearFacetSelection(field : String) : EntitySearcher\n</code></pre>"},{"location":"reference/advanced-search/#specify-search-fields-to-use-for-query-or-range","title":"Specify search field(s) to use for query or range","text":"<pre><code>field(field : String) : EntitySearcher\nfields(fields : [String]) : EntitySearcher\n</code></pre>"},{"location":"reference/advanced-search/#specify-offset-and-number-of-results-for-pagination","title":"Specify offset and number of results (for pagination)","text":"<pre><code>setOffset(offset : Int) : EntitySearcher\nsetLimit(limit : Int) : EntitySearcher\n</code></pre>"},{"location":"reference/advanced-search/#hit-highlighting","title":"Hit highlighting","text":"<p>Highlight matched tokens using the analyzer from the specified search field in a given text, optionally specifying a pre- and posttag (bold by default), number of fragments, fragment length and fragment separator. There are 4 types of highlight methods. Replace highlight with the version that is suitable for you:</p> <ul> <li>highlight - highlights normal text, trying to find matches by analyzing at most 50*1024 characters of the given text.</li> <li>highlightLargeText - same as normal highlight, but without limit on the characters it analyzes, therefore it may need some more cpu time.</li> <li>highlightHTML - same as normal highlight, but it leaves HTML tags intact such that matches in HTML tags are ignored. Used for highlighting text in HTML markup.</li> <li>highlightLargeHTML - same as highlightHTML, but without limit on the characters it analyzes, therefore it may need some more cpu time</li> </ul> <pre><code>highlight(field : String, toHighlight : String) : String\nhighlight(field : String, toHighlight : String, preTag : String, postTag : String) : String\nhighlight(field : String, toHighlight : String, preTag : String, postTag : String, nOfFrgmts : Int, frgmtLength : Int, frgmtSeparator : String) : String\n</code></pre>"},{"location":"reference/advanced-search/#find-similar-entities-based-on-text-fragment","title":"Find similar entities based on text fragment","text":"<p>Just like an ordinary query, first specify the fields using the <code>field(s)</code> function</p> <pre><code>moreLikeThis(text : String) : EntitySearcher\n</code></pre>"},{"location":"reference/advanced-search/#setget-the-current-text-query","title":"Set/get the current text query","text":"<p>Note: Query text from the first specified query is returned in case multiple queries are combined using boolean queries. <pre><code>getQuery() : String\nquery(queryText : String) : EntitySearcher\n</code></pre></p>"},{"location":"reference/advanced-search/#sort-results-by-field-ascending-or-descending","title":"Sort results by field ascending or descending","text":"<pre><code>sortDesc(field : String) : EntitySearcher\nsortAsc(field : String) : EntitySearcher\nclearSorting() : EntitySearcher\n</code></pre>"},{"location":"reference/advanced-search/#range-query-start-and-end-can-be-type-of-string-int-float-and-datedatetimetime-start-and-end-are-included-by-default","title":"Range query, start and end can be type of String, Int, Float and Date/DateTime/Time. start and end are included by default","text":"<pre><code>range(start, end) : EntitySearcher\nrange(start, end, includeMin : Bool, includeMax : Bool) : EntitySearcher\n</code></pre>"},{"location":"reference/advanced-search/#setget-namespace","title":"Set/get namespace","text":"<pre><code>setNamespace(ns : String) : EntitySearcher\ngetNamespace() : String\nremoveNamespace() : EntitySearcher\n</code></pre>"},{"location":"reference/advanced-search/#get-the-list-of-results","title":"Get the list of results","text":"<pre><code>results() : [Entity]\n</code></pre>"},{"location":"reference/advanced-search/#get-the-number-of-results","title":"Get the number of results","text":"<pre><code>count() : Int\n</code></pre>"},{"location":"reference/advanced-search/#get-the-search-time","title":"Get the search time","text":"<pre><code>searchTime() : String\nsearchTimeMillis() : Int\nsearchTimeSeconds() : Float\n</code></pre>"},{"location":"reference/advanced-search/#filters","title":"Filters","text":"<p>Filters are an efficient way to filter search results, because they are cached. If you expect to perform many queries using the same filter (like only showing <code>Message</code>s in a specific category), using a filter is the way to go:</p> <pre><code>MessageSearcher.query(userQuery).addFieldFilter(\"category\",\"humor\")\n</code></pre> <p>or</p> <pre><code>search Message matching userQuery with filter category:\"humor\"\n</code></pre> <p>To get the value of a previously added field filter, use the <code>getFieldFilterValue(field : String)</code> method.</p>"},{"location":"reference/advanced-search/#search-namespaces","title":"Search namespaces","text":"<p>Search namespaces become usefull if you want to allow searches on entities with some specific property value. For example searching <code>Message</code>s by category in the above example. Namespaces have some advantages over using field filters. An index is created for each namespace separately, instead of one for all entities of that type. Since the indexes are used as input for auto completion and spell checking, the use of namespaces enables suggestion services scoped to one, or all, namespace(s). </p>"},{"location":"reference/advanced-search/#result-highlighting","title":"Result highlighting","text":""},{"location":"reference/advanced-search/#spell-checking","title":"Spell checking","text":""},{"location":"reference/advanced-search/#auto-completion","title":"Auto completion","text":""},{"location":"reference/advanced-search/#faceted-search","title":"Faceted search","text":"<p>Facets can be displayed in many contexts. For example, when displaying a list of products, you want the product categories to be displayed as facets. Any searchable property can be used for faceting. The values, as they appear in the search index, are used for faceting. So if you use the default analyzer for the category property of Product, categories containing white spaces are not treated as single facet value. For this to work you need to define an additional field which doesn't tokenize the value of the property, for example by indexing this property untokenized:</p> <pre><code>entity Product{\n  name       : String\n  categories : {Category} (inverse=Category.products)\n\n  search mapping{\n    name\n    categories\n  }\n}\nentity Category {\n  name     : String\n  products : {Product}\n\n  search mapping{\n    name using none //or 'name using no' in v1.2.9.0\n  }\n}\n</code></pre> <p>Facets can be retrieved through the use of a searcher. You first need to specify the facets you want to use by enabling them in the searcher.  A typical example is to display facets in the search results:</p> <p>(updated April 5<sup>th</sup>) <pre><code>template searchbar(){\n  var query := \"\";\n  form {\n    input(query)\n    submit action{\n        //construct a searcher and enable faceting on tags.name, limited to 20 top categories\n        //more facets can be enabled by separating the field(topN) facet definitions by a comma\n        var searcher := search Product matching query with facets categories.name(20);\n        return search(searcher);} {\"search\"}\n  }\n}\n\npage search(searcher : ProductSearcher){\n    var results : [Product] := results from searcher;\n    var facets  : [Facet]   := categories.name facets from searcher;\n\n    header{\"Filter by product category:\"}\n    for(f : Facet in facets){\n        facetLink(f, searcher)\n    }separated-by{\" \"}\n\n    showResults(results)\n}\ntemplate facetLink(facet: Facet, searcher: ProductSearcher){\n    submitlink narrow(facet){ if(facet.isSelected()){\"+\"} output(facet.getValue()) }\"(\" output(facet.getCount()) \")\"\n\n    action narrow(facet : Facet){\n      if (facet.isSelected()) { searcher.removeFacetSelection(facet); } else { ~searcher matching facet.must(); }\n      goto search(searcher);\n    }\n}\n</code></pre></p>"},{"location":"reference/ajax/","title":"Ajax","text":"<p>WebDSL provides ajax operations which allow you to easily replace an element or group of elements in a page without reloading the entire page. These operations can be used as statements inside actions or functions. </p>"},{"location":"reference/ajax/#ajax-operations","title":"Ajax Operations","text":"<pre><code>replace(target, templatecall);\nappend (target, templatecall);\nclear  (target);\n\nrestyle (target, String);\nrelocate(pagecall);\nrefresh();\n\nvisibility(target, show/hide/toggle);\n\nrunscript(String);\n</code></pre> <p>The most commonly used operation is replace, for example:</p> <pre><code>action someaction() {\n  replace(body, showUser(user)); \n}\n</code></pre> <p>This will replace the contents of an element or placeholder (see ajax targets section below) that has id 'body' with the output of the templatecall <code>showUser(user)</code>.</p> <p><code>runscript</code> provides a way to interface with arbitrary Javascript code. Put .js files in a javascript directory in the root of your project and include it using <code>includeJS</code> in a template, e.g. <code>includeJS(\"sdmenu.js\")</code>.</p> <p>Example: Moving a div around using JQuery animate:</p> <pre><code>runscript(\"$('\"+id+\"').animate({left:'\"+x+\"', top:'\"+y+\"'},1000);\");\n</code></pre> <p>The refresh action is the default action; when no other interface changing operations are executed the browser will just refresh the current page. For example an input form which submits to a completely empty action results in the data being saved (default behavior) and the page being refreshed (default behavior). If good way to avoid refreshing (if this is really what you want), is to use <code>runscript(\"\")</code>. Note that it's good practice to return a confirmation message instead of doing nothing.</p>"},{"location":"reference/ajax/#ajax-targets","title":"Ajax Targets","text":"<p>There are three ways to target an ajax operation.  target can either be </p> <ul> <li>the name of an  existing template</li> <li>the name of a placeholder </li> <li>or the id attribute of an object.</li> <li>a String expression that creates the id, e.g. using a related entity object's id property. </li> </ul> <p>Placeholder with non-ajax default content:</p> <pre><code>placeholder leftbar { \"default content\" /* non-ajax default elements */ }\n</code></pre> <p>Placeholder with ajax default content:</p> <pre><code>placeholder leftbar ajaxTemplateCall() /* call to ajax template*/\n</code></pre> <p>Id attribute example:</p> <pre><code>table[id := myfirsttable] { /* non-ajax default elements */ }\n</code></pre> <p>When a template is used as target in an ajax operation, it must be declared with the <code>ajax</code> modifier.</p> <p>Example:</p> <pre><code>template testtemplate(p:Person){\n  placeholder testph{ \"no details shown\" }\n  submit(\"show details\",show())[ajax]\n  action show(){\n    replace(testph,showDetails(p));\n  }\n}\najax template showDetails(person:Person){\n  \" name: \" output(person.name)\n}\n</code></pre> <p>Since an ajaxtemplate results in an extra entry point at the server, it must be explicitly opened when access control is enabled:</p> <pre><code>rule ajaxtemplate showDetails(p:Person){true}\n</code></pre>"},{"location":"reference/ajax/#dom-event-handling","title":"DOM Event Handling","text":"<p>To invoke actions when an HTML event is fired, for example when pressing a key, event attributes can be defined on elements. The syntax of such an attribute is: <pre><code>&lt;event name&gt; := &lt;action call&gt;\n</code></pre> W3schools.com provides an overview of many available events. Note that <code>onmouseenter</code> and <code>onmouseleave</code> are also available, but not documented by W3Schools.</p> <p>Example: <pre><code>\"quicksearch: \" \ninput(search)[onkeyup := updatesearch(search)]\n</code></pre></p> <p>The result is that the <code>updatesearch</code> action is invoked on the server.</p>"},{"location":"reference/ajax/#forms-and-ajax","title":"Forms and Ajax","text":"<p>Typically you should not make a form cross an ajax placeholder. The server considers ajax templates as self-contained components similar to pages.</p> <p>Example of proper usage:</p> <pre><code>template demo(){\n  placeholder test()\n}\najax template test(){\n  form{ input(someGlobal.name) submit action{} {\"save\"} }\n}\n</code></pre> <p>Example of incorrect usage (the submit will be contained in a form on the client but not on the server):</p> <pre><code>template demo(){\n  form{\n    placeholder test()\n  }\n}\najax template test(){\n  input(someGlobal.name) submit action{} {\"save\"}\n}\n</code></pre> <p>In some cases interaction between a regular form and ajax operations is not an issue, e.g. when the ajax template does not contain any input elements. The most common case is rendering validation messages in the form, this behavior is provided in the WebDSL library, see next section.</p>"},{"location":"reference/ajax/#ajax-input-validation","title":"Ajax Input Validation","text":"<p>There are prebuild library components for creating inputs with ajax validation responses.</p> <p>A simple example:</p> <pre><code>template demo(){  \n  var s := \"test\"\n  form{    \n    inputajax(s)\n    submit action{ log(s); } {\"log\"}\n  }\n}\n</code></pre>"},{"location":"reference/app-configuration/","title":"App Configuration","text":"<p>In the application.ini file compile-, database- and deployment information is stored. Executing the webdsl command in a certain directory will look for a application.ini file to obtain compilation information. If no such file was found, it will start a simple wizard to create one. </p> <p>Example application.ini:</p> <pre><code>backend=servlet\ntomcatpath=/opt/tomcat\nappname=hello\ndbserver=localhost\ndbuser=webdsluser\ndbpassword=webdslpassword\ndbname=webdsldb\ndbmode=update\nsmtphost=localhost\nsmtpport=25\nsmtpuser=\nsmtppass=\n</code></pre>"},{"location":"reference/app-configuration/#required-configuration","title":"Required Configuration","text":"<p>backend The back-end target platform of the application. Currently, the servlet back-end is only up-to-date.</p> <p>appname The name of the application to compile. The compiler will look for a APPNAME.app file to compile. This name will also become the servlet name and show up as part of the URL. By renaming the generated APPNAME.war file to ROOT.war and then deploying it, the application name will not be in the URL.</p> <p>tomcatpath This field should contain the root directory of the Tomcat installation. For example /opt/tomcat. It is used when executing 'webdsl deploy'.</p>"},{"location":"reference/app-configuration/#database-configuration-mysql","title":"Database Configuration MySQL","text":"<p>dbmode This field indicates if the application should try to create tables in a database, or try to sync it with the existing schema to avoid loss of data. Valid values are create-drop, update, and false. Update can lead to unpredictable results if data model is changed too much. For production deployment use 'export DBMODE=false'.</p> <p>dbserver Location of the Mysql server, which will be used in the connection URL, e.g. 'localhost'.</p> <p>dbuser User to be used for connecting to the MySQL database.</p> <p>dbpassword Password for the specified user.</p> <p>dbname Database name, note that the database needs to exist when the application is run. The 'webdsl' script will try to create the database in the wizard, but manually creating it via command-line or MySQL Administrator is also possible.</p>"},{"location":"reference/app-configuration/#database-configuration-h2-database-engine-in-file","title":"Database Configuration H2 Database Engine in file","text":"<p>db Set <code>db=h2</code> to enable H2 Database Engine instead of the default MySQL.</p> <p>dbfile H2 database file, an empty file will be populated with tables automatically, when using 'create-drop' or 'update' db modes.</p> <p>dbmode Same as for MySQL.</p>"},{"location":"reference/app-configuration/#database-configuration-h2-database-engine-in-memory","title":"Database Configuration H2 Database Engine in memory","text":"<p>db Set <code>db=h2mem</code> to enable in-memory H2 Database Engine instead of the default MySQL.</p> <p>dbmode Same as for MySQL, although effectively the tables are always dropped after a restart with in-memory database</p>"},{"location":"reference/app-configuration/#database-configuration-through-jndi","title":"Database Configuration through JNDI","text":"<p>db Set <code>db=jndi</code> to retrieve a JDBC resource from the application server, rather than providing the configuration in the web application.</p> <p>dbjndipath JNDI path to the JDBC resource. On Apache Tomcat this is typically prefixed by 'java:comp/env'. An example may be: 'java:comp/env/jdbc/mydatabase'</p> <p>dbmode Same as for MySQL.</p> <p>Apart from settings in the application.ini, also a Context XML file must be provided for Apache Tomcat. An example may be:</p> <pre><code>&lt;Context&gt;\n    &lt;Resource name=\"jdbc/mydatabase\"\n        auth=\"Container\"\n        type=\"javax.sql.DataSource\"\n        driverClassName=\"com.mysql.jdbc.Driver\"\n        maxActivate=\"100\" maxIdle=\"30\" maxWait=\"10000\"\n        username=\"root\" password=\"dbpassword\"\n        url=\"jdbc:mysql://localhost:3306/mydatabase?useServerPrepStmts=false&amp;amp;characterEncoding=UTF-8&amp;amp;useUnicode=true&amp;amp;autoReconnect=true\" /&gt;\n&lt;/Context&gt;\n</code></pre> <p>This XML file must be stored in: $TOMCAT_BASE/conf/Catalina/localhost/&lt;appname&gt;.xml</p>"},{"location":"reference/app-configuration/#email-configuration","title":"Email Configuration","text":"<p>smtphost SMTP host for sending email, e.g. smtp.gmail.com</p> <p>smtpport SMTP port for sending email, e.g. 465</p> <p>smtpuser SMTP username</p> <p>smtppass SMTP password</p> <p>smtpprotocol <code>smtpprotocol=smtps</code> [smtp/smtps] Use smtp or smtps as protocol.</p> <p>smtpauthenticate <code>smtpauthenticate=true</code> [true/false] Authenticate with a username and password.</p>"},{"location":"reference/app-configuration/#search-configuration","title":"Search Configuration","text":"<p>indexdir set the index directory, default is /var/indexes.</p> <p>searchstats Enable/disable search statistics, which can be displayed using template showSearchStats(). Default is false.</p>"},{"location":"reference/app-configuration/#optional-configuration","title":"Optional Configuration","text":"<p>rootapp <code>rootapp=true</code> will deploy the application as root application, it will not have the application name prefix in the URL.</p> <p>wikitext-hardwraps <code>wikitext-hardwraps=true</code> will enable so-called hard wraps in markdown. This way, each newline which isn't followed by 2 white spaces is also rendered as new line. Default is false. See http://yellowgrass.org/issue/WebDSL/818</p> <p>appurlforrenderwithoutrequest (as of WebDSL 1.3.0) Sets the URL to be used when links to pages are to be rendered outside a request. Normally, WebDSL will construct links using the request URL as a base. In case pages or templates with links are to be rendered outside a request (e.g. using a background task), WebDSL will use this property value as the base url.</p> <p>sessiontimeout Sets the session timeout, specified in minutes.</p> <p>javacmem <code>javacmem=3G</code> set javac max memory for compilation of generated Java classes</p> <p>debug <code>debug=true</code> will show queries and Java exception stacktraces in the log.</p> <p>verbose <code>verbose=2</code> will show more info during compilation, mainly for developers.</p> <p>fastpp <code>fastpp=true</code> will make the compiler write Java code faster (writing files stage), however, it also becomes less readable. (only for C-based back-end of the WebDSL compiler)</p>"},{"location":"reference/app-configuration/#deploy-with-tomcat-manager","title":"Deploy with Tomcat Manager","text":"<p>For the <code>webdsl tomcatdeploy</code> and <code>webdsl tomcatundeploy</code> commands to work, a user has to be configured in Tomcat (tomcat/conf/tomcat-users.xml). For example:</p> <pre><code>&lt;tomcat-users&gt;\n  &lt;role rolename=\"manager\"/&gt;\n  &lt;user username=\"tomcat\" password=\"tomcat\" roles=\"manager\"/&gt;\n&lt;/tomcat-users&gt;\n</code></pre> <p>The tomcat manager URL and username and password can be set in the application.ini file (defaults are listed as examples):</p> <p>tomcatmanager <code>tomcatmanager=http:\\\\localhost:8080\\manager</code> URL to Tomcat manager</p> <p>tomcatuser <code>tomcatuser=tomcat</code> manager user declared in tomcat/conf/tomcat-users.xml</p> <p>tomcatpassword <code>tomcatpassword=tomcat</code> password for that user</p>"},{"location":"reference/cli-usage/","title":"CLI Usage","text":""},{"location":"reference/cli-usage/#running-an-application-using-the-command-line-interface","title":"Running an application using the command-line interface","text":"<p>The quickest way to get an application running is to execute:</p> <pre><code>webdsl run appname\n</code></pre> <p>This will generate an application.ini file with default settings, then compile the application, and start a Tomcat instance on port 8080 with the application deployed.</p> <p>If there is already an application.ini file with settings that have to be used, execute:</p> <pre><code>webdsl run\n</code></pre> <p>This will also build and run, using the settings in the existing application.ini file.</p> <p>To create just the war file instead, use:</p> <pre><code>webdsl war\n</code></pre>"},{"location":"reference/cli-usage/#building-war-file-and-deploying-to-external-tomcat","title":"Building .war file and deploying to external Tomcat","text":"<p>The installation of WebDSL will result in a webdsl script and a directory with templates being added to your install location. The script is used to invoke the compilation and deployment of WebDSL applications. </p> <p>In your console, go to the location of the main .app file and invoke the webdsl script with </p> <pre><code>webdsl build\n</code></pre> <p>The script uses an application.ini file for configuration. If an application.ini file is not in the current directory, the script will offer an interactive way to generate it. If the application.ini is available it will be used to configure the application with e.g. database connection settings. The compilation begins by creating a .servletapp directory to which the WebDSL template, the application files, and the static resources are copied. Then the actual WebDSL compiler, webdslc, is invoked. This will either produce an error and halt, or it will produce the source code of a java web application. Upon a successful run of the webdsl compiler, the script will compile the java code, and build a war file. This war file can be copied manually to the tomcat /webapps dir, or it can be uploaded through the web deploy interface of tomcat. If the tomcat path is set in application.ini, then</p> <pre><code>webdsl deploy\n</code></pre> <p>will copy the war file to the /webapps directory. </p> <p>If you have updated webdsl and need to copy the new WebDSL template in .servletapp use</p> <pre><code>webdsl cleanall\n</code></pre> <p>to remove the .servletapp directory (or simply delete it with rm) and then do a build.</p> <p>The script commands can be combined, e.g. </p> <pre><code>webdsl cleanall build deploy\n</code></pre> <p>to clean the generated directory and its contents, regenerate, and deploy.</p>"},{"location":"reference/cli-usage/#example-application","title":"Example Application","text":"<p>1 create a hello.app file</p> <p>hello.app:</p> <pre><code>application test\n\npage root(){\n  \"Hello world\"\n}\n</code></pre> <p>create or generate application.ini:</p> <pre><code>backend=servlet\ntomcatpath=**path to your tomcat directory e.g. /Apps/tomcat/**\nappname=hello\ndbserver=localhost\ndbuser=**mysql user account, e.g. root**\ndbpassword=**password**\ndbname=webdsldb\ndbmode=create-drop\nsmtphost=localhost\nsmtpport=25\nsmtpuser=\nsmtppass=\n</code></pre> <p>2 create the database</p> <p>mysql -u root -p</p> <p>create database webdsldb;</p> <p>exit</p> <p>3 start tomcat in another shell:</p> <p>catalina.sh run (stop with cmd/ctrl+c)</p> <p>or in the background</p> <p>catalina.sh start (stop with catalina.sh stop)</p> <p>4 compile and deploy WebDSL app</p> <p>webdsl cleanall deploy</p> <p>5 open browser and go to http://localhost:8080/hello</p>"},{"location":"reference/development/","title":"Development","text":"<p>This section contains information for developers of WebDSL.</p>"},{"location":"reference/development/#debugging-the-generated-code-developers","title":"Debugging the generated code (developers)","text":"<p>When running an application entirely in the Eclipse environment, you can choose to start debug mode in the 'Servers' view.</p> <p>On the command-line, 'webdsl run' will set up the remote debugger interface, on the usual port 8000. Then set it up in eclipse: Run menu -&gt; debug configurations\u2026 -&gt; click on remote java applications -&gt; new (icon top left) -&gt; add source dirs of your project -&gt; press 'debug'</p>"},{"location":"reference/entities/","title":"Entities","text":"<p>Data models in WebDSL are defined using entity definitions. An entity definition consists of the entity's name, possibly a super-entity from which it inherits, 0 or more properties and 0 or more entity functions:</p> <pre><code>entity User {\n  name     : String (length = 25)\n  email    : Email\n  password : Secret\n  homepage : URL\n  pages    : {Page}\n  function checkPassword( s: String ): Bool { \n    return password.check( s );\n  }\n  predicate sameUser( u: User ){ this == u } \n}\n</code></pre> <p>A property consists of 3 parts:</p> <ul> <li> <p>a name</p> </li> <li> <p>a property type, e.g. value types String, Int, Long, Text or reference/composite types which refer to other entities, such as Person, {Person} (set), and [Person] (list).</p> </li> </ul> <p>For a complete overview of the available types, see Types.</p> <ul> <li>a set of annotations, for instance declaring inverse properties, lengths, validation.</li> </ul> <p>An example data model for a blogging site:</p> <pre><code>entity Author {\n  name     : String\n  email    : Email\n  password : Secret\n  posts    : {Post} (inverse = author)\n}\n\nentity Post {\n  author   : Author\n  title    : String\n  text     : Text\n  comments : {Comment} (inverse = post)\n}\n\nentity Comment {\n  post     : Post\n  author   : String\n  text     : Text\n}\n</code></pre>"},{"location":"reference/entities/#instantiating-entity-objects","title":"Instantiating Entity Objects","text":"<p>Instantiating new entity objects is done with the following expression:</p> <pre><code>Entity{ [property := value]* }\n</code></pre> <p>The entity name followed by an optional list of property assignments between curly brackets.</p> <p>Example:</p> <pre><code>User{}\nUser{ name := \"Alice\" }\nUser{ name := \"Bob\" age := 34 }\n</code></pre> <p>Default initialization (what you would put into the constructor of an object in e.g. the Java programming language), can be added by extending the constructor function that is implicitly called.</p> <p>Example:</p> <pre><code>entity A : B{\n  extend function A(){\n    name := name +\"A\";\n  } \n}\n\nentity B{\n  extend function B(){\n    name := name +\"B\";\n  } \n}\n\ntest constructors {\n  var t := A{};\n  assert(t.name == \"BA\");\n}\n</code></pre> <p>Creating an empty entity which doesn't call the constructor extensions can be done using createEmptyEntity, e.g. <code>createEmptyUser()</code></p>"},{"location":"reference/entities/#name-property","title":"Name Property","text":"<p>The 'name' property is special, it is declared for each entity. By default it is a derived property that simply returns the id of the entity (which is also a special property declared for each entity, id:UUID is set automatically).  The name can be customized by declaring a real name property:</p> <pre><code>name : String\n</code></pre> <p>Or derived name property:</p> <pre><code>name : String := firstname + lastname\n</code></pre> <p>Or by declaring a property as the name using an annotation:</p> <pre><code>someproperty : String (name)\n</code></pre> <p>The name property is used in <code>input</code> and <code>select</code> template elements to refer to an entity. Example:</p> <pre><code>application exampleapp\ninit{\n  var u := User{};\n  u.save();\n  u := User{};\n  u.save();\n  u := User{};\n  u.save();\n}\nentity User{} \nentity UserList{\n  users : [User]\n}\nvar globalList := UserList{}\n\npage root {\n  for( u in globalList.users ){\n    output(u.name) //there is always a name property\n  }\n  form{ \n    input( globalList.users ) //this will show three UUIDs as options\n    submit action{ }{ \"save\" }\n  }\n}\n</code></pre> <p>If the name is not a real property, you cannot create an input for it or assign to it.</p> <p>Note that because 'name' is a derived property, by default you can't assign to it. To make 'name' mutable, you need to explicitly add it to the entity in one of the ways described above.</p>"},{"location":"reference/entities/#derived-properties","title":"Derived Properties","text":"<p>A derived property is a property of an entity (or session entity) which is always equal to the result of an expression. The expression may reference other fields in the entity, but doesn't need to. Derived properties are always read-only. An example:</p> <pre><code>entity User {\n  firstname: String\n  lastname: String\n  name : String := firstname + lastname\n}\n</code></pre>"},{"location":"reference/entities/#list-of-field-properties-for-entities","title":"List of field properties for entities","text":"<ul> <li><code>not null</code>. Makes sure a field isn't null</li> <li><code>default=&lt;value&gt;</code>. Sets a default value. Note that this is different from derived properties</li> <li><code>allowed</code>. See specific docs </li> </ul>"},{"location":"reference/entities/#allowed-property-annotation","title":"Allowed Property Annotation","text":"<p>The <code>allowed</code> annotation for entity properties provides a way to restrict the choices the user has when the property is used in an input:</p> <pre><code>entity Person{\n  friends : {Person} (allowed = from Person as p where p != this)\n}\nvar p1 := Person{}\npage root {\n  form {\n    input( p1.friends )\n    submit action{ }{\"save\"}\n  } \n}\n</code></pre> <p>The allowed collection can be accessed through an entity function with name <code>allowed[PropertyName]</code>, e.g. <code>p1.allowedFriends()</code></p>"},{"location":"reference/entities/#entity-inheritance","title":"Entity Inheritance","text":"<p>Entities can inherit properties and functions from other entities, like subclassing in Object-Oriented programming.</p> <p>Example:</p> <pre><code>entity Sub : Super {\n  str : String\n}\nentity Super {\n  i : Int\n}\nfunction test(){\n  var e1 := Sub{ i := 1 str := \"sdf\" };\n  var e2 := Super{ i := 1 };\n}\n</code></pre> <p>Subclass entities can be passed whenever an argument of one of its super types is expected.</p> <p>Example:</p> <pre><code>function test(){\n  var e1 := Sub{ i := 1 str := \"sdf\" };\n  test(e1);\n}\nfunction test(s:Super){\n  log(s.i);\n}\n</code></pre> <p>Checking the dynamic type of an entity can be done using <code>isa</code> and casting is performed using <code>as</code>.</p> <p>Example:</p> <pre><code>function test(s:Super){\n  if(s isa Sub){\n    var su :Sub := s as Sub;\n    log(su.str);\n  }\n}\n</code></pre> <p>When specifically want to call a function from  the Superclass,  use the 'super' keyword.</p> <p>Example: </p> <pre><code>entity Sub : Super {\n  function foo() : Int {\n    return super.foo();\n  }\n}\nentity Super {\n  function foo() : Int {\n    return 42;\n  }\n}\n</code></pre>"},{"location":"reference/entities/#generated-properties-for-entities","title":"Generated Properties for Entities","text":"<p>For defined entities, a number of properties are automatically generated.</p>"},{"location":"reference/entities/#id","title":"ID","text":"<pre><code>id : UUID\n</code></pre> <p>The id property is used in the database as key for the objects. The property is can only be read. </p>"},{"location":"reference/entities/#version","title":"Version","text":"<pre><code>version : Int\n</code></pre> <p>The version property is a hibernate property which auto-increases for an object that is dirty when it is written to the database. </p>"},{"location":"reference/entities/#created","title":"Created","text":"<pre><code>created : DateTime\n</code></pre> <p>The created property is a generated property which is set on the save of an object also with cascaded saves.</p>"},{"location":"reference/entities/#modified","title":"Modified","text":"<pre><code>modified : DateTime\n</code></pre> <p>The modified property is a generated property which is automatically set on flush of an dirty object.</p>"},{"location":"reference/entities/#generated-functions-for-entities","title":"Generated Functions for Entities","text":"<p>For defined entities, a number of global functions are automatically generated. Replace Entity with the defined entity name below.</p>"},{"location":"reference/entities/#property-with-id-annotation","title":"Property with id annotation","text":"<p>If the Entity has an id annotation on a property, the following functions are generated (idtype is the type of the id property):</p> <p>getUniqueEntity</p> <pre><code>getUniqueEntity(id : idtype) : Entity\n</code></pre> <p>If the Entity with the given id already exists, it is returned. If it did not exist, it is created once and a flush to the database is performed (this will commit any changes made to the entities in memory, e.g. the changes from data binding of input fields), repeated calls to this function with the same argument will keep returning that created Entity.</p> <p>isUniqueEntity</p> <pre><code>isUniqueEntity(ent : Entity) : Bool\n</code></pre> <p>This function returns false when the value of the id property of ent is already taken. The function returns true when the id property is not taken, but will do so only once, subsequent calls with different entities but the same id will then return false (which makes this function suitable for processing a batch of entities in an action).</p> <p>isUniqueEntityId</p> <pre><code>isUniqueEntityId(id : idtype, ent : Entity) : Bool\n</code></pre> <p>This function returns false when the entity would not be unique when given the id argument. The function returns true when the entity would be unique, but will do so only once for a given id, checking a different entity with the same id will return false in the rest of the action handling.</p> <pre><code>isUniqueEntityId(id : idtype) : Bool\n</code></pre> <p>This function returns false when the given id is not available for the Entity type. The function will return true only once, to cope with batch processing.</p> <p>Note that these functions use one collection per entity to determine whether an id is available, so a call to isUniqueUserId(id) can influence the result of isUniqueUser(ent).</p> <p>findEntity</p> <pre><code>findEntity(id : idtype) : Entity\n</code></pre> <p>This function returns the Entity with the given id value, null if it does not exist.</p>"},{"location":"reference/entities/#string-property","title":"String property","text":"<p>For each String property in an Entity, a find function is generated (repace Property with the property name):</p> <p>findEntityByProperty</p> <pre><code>findEntityByProperty(val : String) : [Entity]\n</code></pre> <p>This function returns a list of all Entitys with the exact given Property value, an empty list if there are none.</p> <p>findEntityByPropertyLike</p> <pre><code>findEntityByPropertyLike(val : String) : [Entity]\n</code></pre> <p>This function returns a list of all Entitys with the given Property value as substring, an empty list if there are none.</p>"},{"location":"reference/entities/#entity-name","title":"Entity Name","text":"<p>Every entity has a name, which is always a string. This name can be retrieved by the automatically generated getName() function.</p> <p>The name of an entity is determined as follows:</p> <ol> <li> <p>If a property of the entity has the name annotation, the name of the entity equals this property. This property must be of type String.</p> </li> <li> <p>If a property of the entity is called 'name' and is of type String, this property determines the entity name.</p> </li> <li> <p>Otherwise, the id of the entity (converted to its string-value) is used. </p> </li> </ol>"},{"location":"reference/entities/#example","title":"Example","text":"<p>A typical scenario where these functions come in handy is a create/edit page for an entity. In the following example the isUniquePage function is used to verify that the new page has a unique identifier property:</p> <pre><code>entity Page {\n  identifier : String  (id, validate(isUniquePage(this), \"Identifier is taken\")\n}\npage createPage { \n  var p := Page{}\n  form {\n    label(\"Identifier\"){input(p.identifier)}\n    submit save() { \"save\" }\n    action save(){\n      p.save();\n      message(\"New page created.\");\n      return home();\n    }\n  }  \n}\n</code></pre>"},{"location":"reference/entities/#derive-crud-pages","title":"Derive CRUD Pages","text":"<p>You can quickly generate basic pages for creating, reading, updating and deleting entities using <code>derive CRUD -entityname-</code>. It will create pages that allows creating and deleting such entities, and editing of all entities of this type in the database.</p> <p>Example:</p> <pre><code>application test\n\nentity User {\n  username : String\n}\n\nderive CRUD User\n\n//application global var\nvar u_1 := User{username:= \"test\"}\n\npage root {\n  navigate(createUser()){ \"create\" } \" \"\n  navigate(user(u_1)){ \"view\" } \" \"\n  navigate(editUser(u_1)){ \"edit\" } \" \"\n  navigate(manageUser()){ \"manage\" }\n}\n</code></pre> <p>As the navigates indicate, the pages that are created are:</p> <p>view: </p> <pre><code>page entity(arg:Entity){...}\n</code></pre> <p>create: </p> <pre><code>page createEntity(){...}\n</code></pre> <p>edit: </p> <pre><code>page editEntity(arg:Entity){...}\n</code></pre> <p>manage (delete): </p> <pre><code>page manageEntity(){...}\n</code></pre> <p>These pages are particularly useful when you're just constructing the domain model, because the generated pages are usually too generic for a real application.</p>"},{"location":"reference/examples/","title":"Examples","text":"<p>Below are larger examples of WebDSL applications than those found on the other manual pages.</p>"},{"location":"reference/examples/#minimal-access-control-example","title":"Minimal Access Control Example","text":"<pre><code>application minimalac\n\n  entity User {\n    name : String\n    password : Secret\n  }\n\n  init{\n    var u := User{ name := \"1\" password := (\"1\" as Secret).digest()  };\n    u.save();\n  }\n\n  page root(){\n    authentication()\n    \" \"\n    navigate protectedPage() { \"go\" }\n  }\n\n  page protectedPage(){ \"access granted\" }\n\n  principal is User with credentials name, password\n\n  access control rules\n\n    rule page root(){true}\n    rule page protectedPage(){loggedIn()}\n</code></pre>"},{"location":"reference/examples/#example-native-interface","title":"Example Native Interface","text":"<p>A simple application that shows the public timeline of Twitter using Twitter4J. Example project code is available here</p> <p>Screenshot of result:   Project files:   WebDSL application with native class interface declaration:</p> <pre><code>application exampleapp\n\npage root() {\n  output(TwitterReader.read(null,null))\n}\n\nnative class nativejava.TwitterReader as TwitterReader {\n  static read(String,String) : [String]\n}\n</code></pre> <p>Implementation of TwitterReader.java:</p> <pre><code>package nativejava;\n\nimport java.util.*;\n\nimport twitter4j.Status;\nimport twitter4j.Twitter;\nimport twitter4j.TwitterException;\nimport twitter4j.TwitterFactory;\npublic class TwitterReader{\n\n    public static List&lt;String&gt; read(String twitterID,String twitterPassword){\n        //The factory instance is re-useable and thread safe.\n        Twitter twitter = new TwitterFactory().getInstance(twitterID,twitterPassword);\n        List&lt;String&gt; result = new LinkedList&lt;String&gt;();\n        List&lt;Status&gt; statuses;\n        try {\n            statuses = twitter.getPublicTimeline();\n            for (Status status : statuses) {\n                result.add(status.getUser().getName() + \":\" + status.getText());\n            }\n        } catch (TwitterException e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n}\n</code></pre>"},{"location":"reference/examples/#ajax-example-custom-validation","title":"Ajax Example Custom Validation","text":"<p>This example will show a complex form that uses Ajax for custom data validation.</p> <p>The full project source of this example is located here:</p> <p>https://svn.strategoxt.org/repos/WebDSL/webdsls/trunk/test/succeed-web/manual/ajax-form-validation/</p>"},{"location":"reference/examples/#important-note-1-inverse-annotations","title":"Important Note 1: inverse annotations","text":"<p>Inverse annotations can cause problems due to save cascading in WebDSL, if an inverse is made with an entity in the database, then your temporary entity will be automatically saved in the database as well.</p>"},{"location":"reference/examples/#important-note-2-data-validation","title":"Important Note 2: data validation","text":"<p>Don't use WebDSL's data validation described on the Validation page in combination with this example, because validation is done with custom code here. Data validation will be integrated with ajax to more easily get the result that is implemented in this example.</p> <p>We're going to create an edit page for a <code>Person</code> entity:</p> <pre><code>entity Person {\n  fullname : String\n  username    : String (name)\n  parents     : {Person}\n  children    : {Person}\n}\n</code></pre> <p>The name annotation indicates that the <code>username</code> is used to refer to the Person entity in select inputs, such as those for the <code>parents</code> and <code>children</code> property, see the Name Property page.</p> <p>The <code>root</code> page includes a <code>personedit</code> template and passes it a new <code>Person</code> object.</p> <pre><code>page root() {\n  main()\n  template body() {\n    personedit(Person{})\n\n  }\n}\n</code></pre> <p>The <code>personedit</code> template provides the form that checks values whenever changes occur. The various <code>placeholder</code> elements provide a location to insert error messages. The actual checks are encapsulated in functions, this allows the save action to easily do a server-side check before saving the new Person object. </p> <pre><code>template personedit(p:Person){\n  form{\n    par{\n      label(\"username: \"){ input(p.username)[onkeyup := action{ checkUsername(p); checkUsernameEmpty(p); checkFullname(p); }] }\n      placeholder pusernameempty { }\n      placeholder pusername { }\n    }\n    par{\n      label(\"fullname: \"){ input(p.fullname)[onkeyup := action{ checkFullname(p); checkFullnameEmpty(p); } ] }\n      placeholder pfullnameempty { }\n      placeholder pfullname { }\n    }\n    par{\n      label(\"parents: \"){ input(p.parents)[onchange := action{ checkParents(p); } ] }\n      placeholder pparents { }\n    }\n    par{\n      label(\"children: \"){ input(p.children)[onchange := action{ checkParents(p); } ] }\n    }\n    submit save() [ajax] {\"save\"} //explicit ajax modifier currently necessary in non-ajax templates to enable replace. A warning is shown in the log if this is missing.\n  } \n  action save(){ \n    // made an issue requesting &amp; operator :)\n    var checked := checkUsernameEmpty(p);\n    checked := checkUsername(p) &amp;&amp; checked;\n    checked := checkFullname(p) &amp;&amp; checked;\n    checked := checkParents(p) &amp;&amp; checked;\n    checked :=  checkFullnameEmpty(p) &amp;&amp; checked;\n    if(checked){\n      p.save();\n      return root();\n    } \n  }\n}\n</code></pre> <p>The function definitions perform the check, and also update the placeholders (note that placeholder names are currently global in the application). They also return the result as a boolean, so the functions can be reused in the save action. <code>replace</code> calls perform the insertion of templates into placeholders, in this case the templates are just creating messages.</p> <pre><code>function checkUsernameEmpty(p:Person):Bool{\n  if(p.username != \"\"){ \n    replace(pusernameempty, empty());\n    return true;\n  } \n  else {\n  replace(pusernameempty, mpusernameempty());\n  return false; \n  }\n}\nfunction checkUsername(p:Person):Bool{\n  if((from Person as p1 where p1.username = ~p.username).length == 0)){ \n    replace(pusername, empty());\n    return true;\n  } \n  else {\n  replace(pusername, mpusername(p.username));\n  return false; \n  }\n}\n\nfunction checkFullnameEmpty(p:Person):Bool{\n  if(p.fullname != \"\"){ \n    replace(pfullnameempty, empty());\n    return true;\n  } \n  else {\n  replace(pfullnameempty, mpfullnameempty());\n  return false; \n  }\n}\nfunction checkFullname(p:Person) :Bool{\n  if(p.username != p.fullname) { \n    replace(pfullname, empty());\n    return true;\n  } \n  else{\n    replace(pfullname, mpfullname());\n    return false; \n  }\n}\n</code></pre> <p>The templates for the messages are shown below. An errorclass template is used to wrap all the errors in the same div tag with special error class, to provide a hook for CSS styling. Templates that are used in replace actions have to be declared as <code>ajax</code> template. When access control is enabled the ajax templates can be protected with the <code>ajaxtemplate</code> rule type.</p> <pre><code>template errorclass(){\n  &lt;div class=\"error\"&gt; elements() &lt;/div&gt;\n}\najax template empty { \"\" }\najax template mpusername(name: String) { errorclass{ \"Username \" output(name) \" has been taken already\" } }\najax template mpusernameempty { errorclass{ \"Username may not be empty\" } }\najax template mpfullname { errorclass{ \"Username and fullname should not be the same\" } }\najax template mpfullnameempty { errorclass{ \"Fullname may not be empty\" } }\najax template mpparents(pname : String, names : [String]){ \n  errorclass{ \n    \"Person\" \n    if(names.length &gt; 1){\"s\"}\n    \" \" \n    for(name: String in names){\n      output(name)\n    } separated-by {\", \"}\n    \" cannot be both parent and child of \" output(pname)\n  }\n}\n</code></pre> <p>This app includes some CSS for top-aligned labels (http://css-tricks.com/label-placement-on-forms/), the errors are shown on new lines and in red. </p> <pre><code>label {\n  clear:both;\n  float:left;\n  margin:10px 0 2px 0;\n}\ninput, select {\n  clear:both;\n  float:left;\n}\n#errorclass {\n  color: red;\n  clear: both;\n  float: left;\n  margin:2px 0 0 0;\n}\ninput[type=\"button\"]{\n  clear: both;\n  float: left;\n  margin: 20px 0 10px 0; \n}\n</code></pre>"},{"location":"reference/examples/#edit-instead-of-create","title":"Edit instead of Create","text":"<p>Since the example used a new Person entity, the <code>save</code> controls whether the object is persisted. If the entity was already in the database, and this is an edit page, then the save wouldn't be necessary to persist changes. Unfortunately this has the side-effect that all intermediate submits (on every change) already persist the changes automatically. One way to work around this issue create a copy of the entity and use that for data binding. Instead of the <code>save()</code> call, the code needs to put the changes back into the real persisted entity.</p> <p>The editpage, in this case a global entity var is passed in, to demonstrate changing an entity that is persisted.</p> <pre><code>page edit(){\n  main()\n  template body() {\n    personedit(pAlice)\n  }\n}\n</code></pre> <p>The template is shown below, unchanged parts are left out. A template var that copies the original values is used for data binding, in the save action the changes are placed in the real person object. The <code>save</code> call is not necessary for edits, but now the template works correctly for both edit and create actions.</p> <pre><code>template personedit(realp:Person){\n  var p := Person{ username := realp.username fullname := realp.fullname children := realp.children parents := realp.parents};\n  form{\n    par{\n      label(\"username: \"){ input(p.username)[onkeyup := action{ checkUsername(p,realp); checkUsernameEmpty(p); checkFullname(p); }] }\n\n     ...\n\n  action save(){ \n    // made an issue requesting &amp; operator :)\n    var checked := checkUsernameEmpty(p);\n    checked := checkUsername(p,realp) &amp;&amp; checked;\n    checked := checkFullname(p) &amp;&amp; checked;\n    checked := checkParents(p) &amp;&amp; checked;\n    checked :=  checkFullnameEmpty(p) &amp;&amp; checked;\n    if(checked){\n      realp.username := p.username;\n      realp.fullname := p.fullname;\n      realp.parents := p.parents;\n      realp.children := p.children;\n      realp.save(); // does nothing in the case of an update\n      return root();\n    } \n  }\n}\n</code></pre> <p>One of the checks needs to change, because the entity might be already in the database now.</p> <pre><code>function checkUsername(p:Person, realp:Person):Bool{\n  var matches := from Person as p1 where p1.username = ~p.username;\n  if(matches.length == 0 || (matches.length == 1 &amp;&amp; matches[0] == realp)){ \n    replace(pusername, empty());\n    return true;\n  } \n  else {\n  replace(pusername, mpusername(p.username));\n  return false; \n  }\n}\n</code></pre> <p>The full project source of this example is located here:</p> <p>https://svn.strategoxt.org/repos/WebDSL/webdsls/trunk/test/succeed-web/manual/ajax-form-validation/</p>"},{"location":"reference/forms/","title":"Forms","text":"<p>The <code>form</code> element enables user input, and should include <code>submit</code> or <code>submitlink</code> elements to handle that user input. When pressing such a submit button/link, data binding will be performed for all inputs in the form.</p> <pre><code>form {\n  var name: String\n  var pass: Secret\n\n  label(\"Username:\"){ input(name) }\n  label(\"Password:\"){ input(pass) }\n\n  submit save() { \"save\" }\n}\naction save(){\n  User{ \n    username := name \n    password := pass.digest()\n  }.save();\n}\n</code></pre>"},{"location":"reference/forms/#input","title":"Input","text":"<p><code>input(&lt;expression&gt;)</code> creates an input form element. Can be applied directly to the properties of an entity (e.g., input(user.name)) or to page variables.</p> <p>Input widgets are determined by the type of the property passed to the input template call:</p> <ul> <li>String, Email, Int, Float, URL, Patch -&gt; textfield</li> <li>Text, WikiText -&gt; textarea</li> <li>Bool -&gt; checkbox</li> <li>Date, DateTime, Time -&gt; date picker</li> <li>[Entity], {Entity} -&gt; multiselect (bug: List actually requires a different type of input, to allow duplicates and control ordering)</li> <li>Entity -&gt; select</li> </ul> <p>For example, to get a checkbox, use:</p> <pre><code>page root {\n var x : Bool := false\n form{\n   input(x)\n   submit action{ log(x); } { \"log result\" }\n }\n}\n</code></pre> <p>or:</p> <pre><code>entity TestEntity {\n  x : Bool\n}\ntemplate editTestEntity (e:TestEntity){\n form{\n   input(e.x)\n   submit action{ } { \"update entity\" }\n }\n}\n</code></pre>"},{"location":"reference/forms/#page-variables","title":"Page Variables","text":"<p>Page and template definitions can contain variables. This example displays \"Dexter\":</p> <pre><code>page cat {\n  var c := Cat { name := \"Dexter\" }\n  output(c.name)\n}\n\nentity Cat {\n  name : String\n}\n</code></pre> <p>These variables are necessary when constructing a page that creates a new entity instance. The instance can be created in the variable and data binding can be used for the input page elements. The next example allows new cat entity instances to be created, and the default name in the input form is \"Dexter\":</p> <pre><code>page newCat {\n  var c := Cat { name := \"Dexter\" }\n  form{\n    label(\"Cat's name:\"){ input(c.name) }\n    submit action {\n      c.save();\n      return showCat(c);\n    } { \"save\" }\n  }\n}\n</code></pre> <p>It is possible to initialize such a page/template variable with arbitrary statments using an 'init' action:</p> <pre><code>page newCat {\n  var c\n  init {\n    c := Cat{};\n    c.name := \"Dexter\";\n  }\n  form{\n    label(\"Cat's name:\"){ input(c.name) }\n    submit action {\n       c.save();\n       return showCat(c);\n    } { \"save\" }\n  }\n}\n</code></pre> <p>Be aware that these type of variables (and the init blocks) are handled separately from the other elements. They do not adhere to template control flow constructs like 'if' and 'for'; they are extracted from the definition. However, you can express such functionality in the 'init' block. For example:</p> <p>error:</p> <pre><code>page bad {\n  if(someConditionFunction()){\n    var c := Cat{}\n  }\n  else {\n    var c := Cat{ name := \"Dexter\" }\n  }\n  output(c.name)\n}\n</code></pre> <p>ok:</p> <pre><code>page good {\n  var c\n  init{ \n    if(someConditionFunction()){\n      c := Cat{}\n    }\n    else {\n      c := Cat{ name := \"Dexter\" }\n    }\n  }\n  output(c.name)\n}\n</code></pre>"},{"location":"reference/forms/#input-for-entity","title":"input for Entity","text":"<p><code>input(x, y)</code> can be used as input for an entity variable or for a collection of entities variable, where <code>x</code> is the variable or fieldaccess and <code>y</code> is the collection of options. It will create a dropdown box/select or a multi-select respectively. The <code>name</code> property of an entity is used to describe the entity in a select, see Name Property.</p> <p><code>input(x)</code> for an entity reference property or a collection property is the same as <code>select</code>, with as options all entities of its type that are in the database.</p> <p>Example:</p> <pre><code>entity User {\n  username : String (name)\n  teammate : User\n  group : {Group}\n}\nentity Group {\n  groupname : String (name)\n}\ninit { // application init\n  var u := User { username := \"Alice\" };\n  u.save();\n  u := User { username := \"Bob\"};\n  u.save();\n  var g := Group { groupname := \"group 1\" };\n  g.save();\n  g := Group { groupname := \"group 2\" };\n  g.save();\n}\npage root {\n  form{\n    table{\n      for( u: User ){\n        output(u.username)\n        input(u.teammate)\n        input(u.group)\n      }\n    }\n    submit action{} { \"save\" }\n  }\n}\n</code></pre> <p><code>input(u.teammate)</code> is a dropdown/select with options <code>null</code>, \"Alice\", \"Bob\". <code>input(u.group)</code> is a multi-select with options \"group 1\" and \"group 2\".</p> <p>Example 2:</p> <pre><code>page root {\n  var teammates := from User\n  var groups := from Group\n  form{\n    table{\n      for(u:User){\n        output(u.username)\n        input(u.teammate, teammates)\n        input(u.group, groups)\n      }\n    }\n    submit action{} { \"save\" }\n  }\n}\n</code></pre> <p>Equivalent to the previous example, but using explicit selects instead.</p> <p>Example 3:</p> <pre><code>var u3 := User { username:=\"Dave\" }\nvar g3 := Group { groupname:=\"group 3\" }\n\npage root {\n  var teammates := [u3]\n  var groups := {g3}\n  form{\n    table{\n      for(u:User){\n        output(u.username)\n        input(u.teammate, teammates)\n        input(u.group, groups)\n      }\n    }\n    submit action{ }{ \"save\" }\n  }\n}\n</code></pre> <p>Options are restricted in this example, <code>null</code> and \"Dave\" for <code>select(u.teammate, teammates)</code> and only \"group 3\" for <code>select(u.group, groups)</code></p>"},{"location":"reference/forms/#null","title":"Null","text":"<p>The <code>null</code> option for a select can be removed either by a <code>not null</code> annotation on the property:</p> <pre><code>teammate : User (not null)\n</code></pre> <p>Or by setting <code>[not null]</code> on the <code>input</code> or <code>select</code> itself:</p> <pre><code>input(u.teammate)[not null]\ninput(u.teammate, teammates)[not null]\n</code></pre>"},{"location":"reference/forms/#allowed","title":"Allowed","text":"<p>The possible options can also be determined using an annotation on the property:</p> <pre><code>group : {Group} (allowed = {g3})\n</code></pre> <p>In this case just using <code>input(u.group)</code> will only show \"group 3\"</p>"},{"location":"reference/forms/#radio-buttons","title":"Radio Buttons","text":"<p>Radio buttons can be used as an alternative to <code>select</code> for selecting an entity from a list of entities. The <code>name</code> property, or the property with <code>name</code> annotation, will be used as a label for the corresponding radio button.</p> <pre><code>entity Person {\n  name   : String\n  parent : Person\n}\n\npage editPerson(p:Person){\n  radio(p.parent, getPersonList())\n}\n</code></pre>"},{"location":"reference/forms/#captcha","title":"Captcha","text":"<p>The <code>captcha</code> element creates a fully automatic CAPTCHA form element.</p> <p>Example:</p> <pre><code>page root {\n  var i : Int\n  form{\n    input(i)\n    captcha()\n    submit action{ Registration{ number := i }.save(); } {\"save\"}\n  }\n}\n</code></pre>"},{"location":"reference/https-encryption/","title":"HTTPS Encryption","text":"<p>note: this section is outdated, it is recommended to configure HTTPS on the Nginx or Apache Httpd in front of tomcat, using HSTS policy to force all traffic over HTTPS</p>"},{"location":"reference/https-encryption/#tomcat-configuration","title":"Tomcat Configuration","text":"<p>Using https requires some extra configuration when deploying to an external tomcat server, the tomcat instance used in the plugin and command-line test and run commands is already configured (note: this uses a dummy configuration which should not be used in production deployment of the app). Follow these steps to configure Tomcat 6:</p> <p>Run this command and follow the instructions (note down the password):</p> <pre><code>%JAVA_HOME%\\bin\\keytool -genkey -alias tomcat -keyalg RSA\n</code></pre> <p>Then, in tomcat/conf/server.xml add (use the password entered in the keytool):</p> <pre><code>&lt;Connector port=\"8443\" protocol=\"HTTP/1.1\" SSLEnabled=\"true\"\n  maxThreads=\"150\" scheme=\"https\" secure=\"true\"\n  keystoreFile=\"${user.home}/.keystore\" keystorePass=\"--password--\"\n  clientAuth=\"false\" sslProtocol=\"TLS\" /&gt;\n</code></pre> <p>Read more about this topic here: http://tomcat.apache.org/tomcat-6.0-doc/ssl-howto.html</p>"},{"location":"reference/lightweight-vps/","title":"Lightweight VPS","text":"<p>WebDSL applications can be deployed on a light-weight server or VPS. Whether performance is acceptable depends on many factors such as complexity of the application, number of users, capacity of the server. Currently, the ram usage is usually the limiting factor. The JVM halts or gets stuck when the max heap space limit is crossed (-Xmx setting). 512mb ram, typically the lowest VPS option, can run a simple WebDSL application, but getting 1gb or 2gb is recommended.</p> <p>In the rest of this section is a walkthrough of the minimal steps required for installation of a WebDSL application on an Ubuntu Server (this was for a VPS with 1gb ram).</p> <p>Update packages library (run all apt-get commands as root or with sudo):</p> <pre><code>apt-get update\n</code></pre> <p>Install MySQL:</p> <pre><code>apt-get install mysql-server\n</code></pre> <p>Enter a password for the mysql root account.</p> <p>Install Java, Tomcat, and other requirements for running the WebDSL compiler:</p> <pre><code>apt-get install ant unzip openjdk-7-jdk tomcat7\n</code></pre> <p>Get WebDSL compiler:</p> <pre><code>wget http://hydra.nixos.org/job/webdsl/trunk/buildJavaZip/latest/download/1/webdsl-java.zip\nunzip webdsl-java.zip\nchmod +x webdsl/bin/webdsl\nexport PATH=$PATH:/[path]/webdsl/bin/\n</code></pre> <p>Add the export PATH line to your ~/.bashrc file to make the 'webdsl' command work the next time you log in as well.</p> <p>Install mail SMTP server:</p> <pre><code>apt-get install postfix\n</code></pre> <p>Choose the internet configuration, test locally with 'sendmail' command. If something is wrong in the configuration, change it with:</p> <pre><code>sudo dpkg-reconfigure postfix\n/etc/init.d/postfix reload\n</code></pre> <p>Configure WebDSL application, create application.ini:</p> <pre><code>appname=myapp\nbackend=servlet\ntomcatpath=/var/lib/tomcat7/\nhttpport=8080\nhttpsport=8443\ndbmode=update\nindexdir=/var/indexes/\ndbserver=localhost\ndbname=mydb\ndbuser=myuser\ndbpassword=mypass\nsmtphost=localhost\nsmtpport=25\nsmtpprotocol=smtp\nsmtpauthenticate=false\nrootapp=true\n</code></pre> <p>If using a gmail account to send mail instead of local SMTP server, use:</p> <pre><code>smtphost=smtp.gmail.com\nsmtpport=465\nsmtpuser=blabla\nsmtppass=thepass\n</code></pre> <p>Create database and mysql user:</p> <pre><code>mysql -u root -p\ncreate database mydb;\ngrant all privileges on mydb.* to myuser@'localhost' identified by 'mypass';\nflush privileges;\nquit\n</code></pre> <p>Open up the indexes directory (can be placed anywhere):</p> <pre><code>mkdir /var/indexes\nchown -R tomcat7 /var/indexes\n</code></pre> <p>Compile application (in this application.ini myapp.app is the main file) and deploy:</p> <pre><code>webdsl build deploy\n</code></pre> <p>Check what's going on in Tomcat using:</p> <pre><code>tail -f /var/lib/tomcat7/logs/catalina.out\n</code></pre> <p>Set Tomcat's heap higher:</p> <pre><code>nano /etc/default/tomcat7\n</code></pre> <p>Change</p> <pre><code>JAVA_OPTS=\"-Djava.awt.headless=true -Xmx128m -XX:+UseConcMarkSweepGC\"\n</code></pre> <p>to</p> <pre><code>JAVA_OPTS=\"-Djava.awt.headless=true -Xmx768m -XX:+UseConcMarkSweepGC\"\n</code></pre> <p>Restart Tomcat:</p> <pre><code>/etc/init.d/tomcat7 restart\n</code></pre> <p>Check Tomcat's current JVM arguments:</p> <pre><code>ps aux | grep tomcat\n</code></pre> <p>Tomcat will run on port 8080 instead of 80, a quick fix to get it to work on port 80 is the following:</p> <pre><code>iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080\n</code></pre>"},{"location":"reference/mysql/","title":"MySQL","text":"<p>This section gives some practical tips on working with MySQL.</p>"},{"location":"reference/mysql/#working-with-mysql-dumps","title":"Working with MySQL dumps","text":""},{"location":"reference/mysql/#creating-a-mysql-dump","title":"Creating a MySQL dump","text":"<pre><code>mysqldump -u root --single-transaction dbname &gt; mydump.sql\n</code></pre> <p>Optionally exclude less important tables:</p> <pre><code>mysqldump -u root myapplication &gt; dump.sql --single-transaction --ignore-table=myapplication._SecurityContext --ignore-table=myapplication._RequestLogEntry\n</code></pre>"},{"location":"reference/mysql/#loading-a-small-mysql-dump","title":"Loading a small Mysql dump","text":"<pre><code>mysql -u root dbname &lt; mydump.sql\n</code></pre>"},{"location":"reference/mysql/#loading-a-large-mysql-dump","title":"Loading a large MySQL dump","text":"<p>When loading large MySQL dumps (for local testing), convert them to MyISAM (lack of transactions makes it unusable for production db, but it loads a lot faster due to lack of foreign key checks).</p> <p>Before loading the dump, increase these settings in /etc/my.cnf and restart MySQL to load the changed settings:</p> <pre><code>key_buffer_size=1024m\nmax_allowed_packet=1024m\n\nmysqladmin -u root shutdown\nmysqld -u root &amp;\n</code></pre> <p>Then run</p> <pre><code>cat mydump.sql | sed s/ENGINE=InnoDB/ENGINE=MyISAM/ | mysql -u root\n</code></pre> <p>Or, if you want to create an intermediate file with the MyISAM dump first (slower):</p> <pre><code>sed s/ENGINE=InnoDB/ENGINE=MyISAM/ mydump.sql &gt; mydump.sql.myisam\nmysql -u root dbname &lt; mydump.sql.myisam\n</code></pre>"},{"location":"reference/mysql/#mysql-settings","title":"MySQL Settings","text":"<p>Show status of InnoDB:</p> <pre><code>mysql -u root \nshow innodb status;\n</code></pre> <p>See what MySQL is doing (e.g. expensive query):</p> <pre><code>show processlist;\n</code></pre> <p>Check the current structure of a table, including foreign key constraints. This can be helpful in resolving issues caused by db mode 'update', which only adds columns but will not change an existing column:</p> <pre><code>show create table _Alias;\n</code></pre> <p>We use the following settings for MySQL on our production server (NixOS/Linux):</p> <pre><code>[mysqld]\nkey_buffer_size = 256M\nmax_allowed_packet = 64M\nsort_buffer_size = 2M\nread_buffer_size = 2M\nmyisam_sort_buffer_size = 64M\nquery_cache_size = 128M\nmax_connections = 250\n\n[mysqldump]\nmax_allowed_packet = 16M\n\n[isamchk]\nkey_buffer = 256M\nsort_buffer_size = 256M\n\n[myisamchk]\nkey_buffer = 256M\nsort_buffer_size = 256M\n</code></pre>"},{"location":"reference/native-java-interface/","title":"Native Java Interface","text":""},{"location":"reference/native-java-interface/#native-classes","title":"Native Classes","text":"<p>Native Java classes can be declared in a WebDSL application in order to interface with existing libraries and code.</p> <p>The supported elements are properties, (static) methods, and constructors. The supported types are</p> <ul> <li>WebDSL type - Java type</li> <li>Int - int or Integer</li> <li>Bool - boolean or Boolean</li> <li>Float - float or Float</li> <li>String - String</li> </ul> <p>Both the primitive type and the object types such as int and Integer can be produced by the WebDSL call (so overloading between these types is a problem here).</p> <p>Add Java classes to a nativejava/ dir next to your app file and jar files in lib/.</p> <p>Example:</p> <pre><code>native class nativejava.TestSub as SubClass : SuperClass {\n  prop :String\n  getProp():String\n  setProp(String)\n  constructor()\n}\n\nnative class nativejava.TestSuper as SuperClass  {\n  getProp():String\n  static getStatic(): String\n  returnList(): List&lt;SubClass&gt;\n}\n\npage root() {\n  var d : SuperClass := SubClass()  \n  output(d.getProp())\n\n  var s : SubClass := SubClass()\n  init{\n    s.setProp(\"test\");\n  }\n  output(s.prop)\n\n  output(SuperClass.getStatic())\n\n  for(a: SubClass in d.returnList()){\n    output(a.prop)\n  } \n}\n</code></pre> <p>(Example taken from compiler tests, source </p> <pre><code>https://svn.strategoxt.org/repos/WebDSL/webdsls/trunk/test/succeed/native-classes.app\nhttps://svn.strategoxt.org/repos/WebDSL/webdsls/trunk/test/succeed/nativejava/TestSub.java\nhttps://svn.strategoxt.org/repos/WebDSL/webdsls/trunk/test/succeed/nativejava/TestSuper.java\n</code></pre> <p>)</p>"},{"location":"reference/native-java-interface/#passing-a-native-java-instance-as-page-argument","title":"Passing a native java instance as page argument","text":"<p>If you want an instance of your defined native java class to be passed as page (or ajax template) argument, the class should be serializable for WebDSL. From WebDSL version 1.3.0 and on, support is added for doing this by implementing the following 2 methods in your java class. (If you use a class defined in a library, you may need to extend this class with the following methods)</p> <pre><code>public static YourClass fromParamMap( Map&lt;String,String&gt; paramMap )\npublic final Map&lt;String,String&gt; toParamMap()\n</code></pre> <p>note: The keys in the returned Map may only consist of character classes [A-Z][a-z][0-9], values may hold any value as they get filtered. On deserialization, the static <code>fromParamMap</code> method is invoked and its result is cast to the type as defined in the page/java template definition.</p> <p>Examples can be found (notice the link ;)) in WebDSL's source code itself.</p>"},{"location":"reference/pages/","title":"Pages","text":"<p>Pages in WebDSL can be defined using the following construct:  </p> <pre><code> page [pagename]( [page-arguments]* ){ [page-elements]* }\n</code></pre> <p>There are basic output elements for structure and layout of the page, such as <code>title</code> and <code>header</code>. </p> <p>Example:</p> <pre><code>page root {\n  title { \"Page title\" }\n  section {\n    header{ \"Hello world.\" }  \n    \"Greetings to you.\"\n  }\n}\n</code></pre>"},{"location":"reference/pages/#page-parameters","title":"Page Parameters","text":"<p>Pages can have parameters, and <code>output</code> is used for inserting data values. </p> <p>Example:</p> <pre><code>page user(u : User) {\n  \"The name of this user is \" output(u.name)\n}\n</code></pre>"},{"location":"reference/pages/#input-forms","title":"Input Forms","text":"<p>The <code>form</code> element in combination with <code>submit</code> is used for submitting data. <code>input</code> elements perform automatic data binding upon submit. For more information about forms, go to the Forms page.</p> <p>Example:</p> <pre><code>page editUser(u:User){\n  form{\n    input(u.name)\n    submit action{} { \"save\" } \n  }\n}\n</code></pre>"},{"location":"reference/pages/#templates","title":"Templates","text":"<p>Pages can be made reusable by declaring them as template, and calling them from other pages or templates.</p> <p>Example:</p> <pre><code>template common(){\n  header{ \"my page\" }\n}\npage root(){\n  common()\n}\n</code></pre>"},{"location":"reference/pages/#output","title":"Output","text":"<p>The <code>output(&lt;expression&gt;)</code> template call is used to display a value in a page. It can also be used with Entity type expressions, and collections.</p> <p>Example:</p> <pre><code>page user(u:User){\n  output(u)\n}\n</code></pre> <p>The <code>output</code> template can be customized for each entity type.</p> <p>Example:</p> <pre><code>template output(u:User){\n  \"user with name: \" output(u.name)\n}\n</code></pre>"},{"location":"reference/pages/#navigate","title":"Navigate","text":"<pre><code>navigate &lt;page call&gt; { &lt;page element*&gt; }\n</code></pre> <p>Link to a page. For example: </p> <pre><code>page news() { \"News\" }\n</code></pre>"},{"location":"reference/pages/#title","title":"Title","text":"<p>Declares the title of the current page.</p> <pre><code>title { element* }\n</code></pre>"},{"location":"reference/pages/#description","title":"Description","text":"<p>Declares the description of a page (not visible, added as description meta tag in the head section of a page). This data is often viewed in search result snippets. Introduced in WebDSL 1.3.0.</p> <pre><code>description { element* }\n</code></pre>"},{"location":"reference/pages/#section","title":"Section","text":"<pre><code>section { element* }\n</code></pre> <p>Indicate sections in a document; may be nested. May include a </p> <pre><code>header { element* }\n</code></pre> <p>element that indicates the section title.</p>"},{"location":"reference/pages/#image","title":"Image","text":"<pre><code>image ( &lt;string with relative or absolute path to image&gt; )\n</code></pre> <p>Displays an image. Images placed in an \"images\" folder in the root directory of your application will be automatically copied during deployment.</p> <p>Example:</p> <pre><code>page root(){\n  image(\"https://update.webdsl.org/images/WebDSL-small.png\") \n  image(\"/images/WebDSL-small.png\") \n}\n</code></pre>"},{"location":"reference/pages/#lists","title":"Lists","text":"<p>Lists can be created with the <code>list</code> and <code>listitem</code> elements.</p> <p>Example:</p> <pre><code>list {\n  listitem { \"Milk\" }\n  listitem { \"Potatoes\" }\n  listitem { \"Cheese (lots)\" }\n}\n</code></pre>"},{"location":"reference/pages/#tables","title":"Tables","text":"<p>Tables can be created with the <code>table</code>, <code>row</code>, and <code>column</code> elements.</p> <p>Example:</p> <pre><code>table  {\n  row { column{ \"Username\" } column{ output(user.name) } }\n  row { column{ \"Password\" } column{ \"it's a secret\" } }\n}\n</code></pre>"},{"location":"reference/pages/#block","title":"Block","text":"<pre><code>block{ &lt;page element*&gt; }\nblock(String){ &lt;page element*&gt; }\n</code></pre> <p>Groups text; optionally defines a class for referencing in CSS. Results in a &lt;div&gt; element in HTML.</p>"},{"location":"reference/pages/#templates_1","title":"Templates","text":"<p>Templates enable reuse of page elements. For example, a template for a footer could be:</p> <pre><code>template footer() { All your page are belong to us. }\n</code></pre> <p>This template can be included in a page with a template call: </p> <pre><code>page example(){\n  footer\n}\n</code></pre> <p>Like pages, templates can be parameterized.</p> <pre><code>template edit(g:Group){\n  form {\n    input(g.members)\n    submit action {} { \"save\" }\n  } \n}\n\npage editGroup(g:Group){\n  edit(g)\n}\n</code></pre>"},{"location":"reference/pages/#overloading","title":"Overloading","text":"<p>While pages must have unique names, templates can be overloaded. The overloading is resolved compile-time, based on the static types of the arguments.</p> <pre><code>template edit(g:Group){...}\ntemplate edit(u:User){...}\n\npage editGroup(g:Group){\n  edit(g)\n}\n</code></pre>"},{"location":"reference/pages/#dynamically-scoped-templates-redefinitions","title":"Dynamically scoped templates redefinitions","text":"<p>Template definitions can be redefined locally in a page or template, to change their meaning in that specific context. All uses are replaced in templates called from the redefining template.</p> <pre><code>template main{\n  body()\n}\ntemplate body(){\n  \"default body\"\n}\npage root(){\n  main\n  template body(){\n    \"custom body\"\n  }\n}\n</code></pre>"},{"location":"reference/pages/#for-loop","title":"For-loop","text":"<p>Iterating a collection of entities or primitives can be done using a for loop. There are three types of for loops for templates:</p> <p>For</p> <pre><code>    for(id:t in e){ elem* }\n</code></pre> <p>This type of for loop iterates the collection produced by expression e, which must contain elements of type t. The elements in the collection are accessible through identifier id.  </p> <p>The collection can be filtered:</p> <pre><code>    for(id:t in e filter){ elem* }\n</code></pre> <p>ForAll</p> <p>This for loop iterates all the entities in the database of type t. These can also be filtered. Note that it is more efficient to retrieve the objects using a filtering query and use the regular for loop above for iteration. </p> <pre><code>    for(id:t){ elem* }\n    for(id:t filter){ elem* }\n</code></pre> <p>For Count</p> <p>This for loop iterates the numbers from e1 to e2-1.</p> <pre><code>    for(id:Int from e1 to e2){ elem* }\n</code></pre> <p>For Separator</p> <p>All three template for loops can be followed by a separated-by declaration, which will separate the outputs from the for loop with the declared elem*.</p> <pre><code>    separated-by{ elem* }\n</code></pre> <p>For-loop Filter</p> <p>The filter part of a for loop can consist of four parts:</p> <p>Where</p> <pre><code>    where e1\n</code></pre> <p>e1 is a boolean expression which needs to evaluate to true for the element to be iterated.</p> <p>Order By</p> <pre><code>    order by e2 asc/desc\n</code></pre> <p>e2 is an expression that needs to produce a primitive type such as String or Int, which will be used to order the elements ascending or descending.</p> <p>Limit</p> <pre><code>    limit e3\n</code></pre> <p>e3 is an Int expression which will limit the number of elements that get iterated.</p> <p>Offset</p> <pre><code>    offset e4\n</code></pre> <p>e4 is an Int expression which will offset the starting element of the iteration.</p> <p>Each of the four parts is optional, but they have to be specified in this order. The filtering is done in the application, so use queries instead of filters to optimize the WebDSL application.</p>"},{"location":"reference/pages/#xml-embedding","title":"XML Embedding","text":"<p>XML fragments can be embedded directly in templates. This allows easy reuse of existing XHTML fragments and CSS. For example: </p> <pre><code>template main() {\n  &lt;div id=\"pagewrapper\"&gt;\n    &lt;div id=\"header\"&gt;\n      header()\n    &lt;/div&gt;\n    &lt;div id=\"footer\"&gt;\n      &lt;p /&gt;\"powered by \" &lt;a href=\"https://webdsl.org\"&gt;\"WebDSL\"&lt;/a&gt;&lt;p /&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;some:tag /&gt;\n}\n</code></pre> <p>While the name and attribute names are fixed, the attribute values can be any WebDSL expression that produces a string:</p> <pre><code>template test(i : Int) {\n  &lt;div id=\"page\" + \"wrapper\" + i /&gt;\n}\n</code></pre>"},{"location":"reference/pages/#include-css","title":"Include CSS","text":"<p>The <code>includeCSS(String)</code> template call allows you to include a CSS file in the resulting page. CSS files can be included in your project by placing them in a stylesheets/ directory in the project root.</p> <p>Example 1:</p> <pre><code>page root() {\n  includeCSS(\"dropdownmenu.css\")\n}\n</code></pre> <p>It is also possible to include a CSS file using an absolute URL. </p> <p>Example 2:</p> <pre><code>page root() {\n  includeCSS(\"https://webdsl.org/stylesheets/common_.css\")\n}\n</code></pre> <p>The media attribute can be set by passing it as second argument in <code>includeCSS(String,String)</code></p> <p>Example 3:</p> <pre><code>page root(){\n  includeCSS(\"https://webdsl.org/stylesheets/common_.css\",\"screen\")\n}\n</code></pre>"},{"location":"reference/pages/#include-javascipt","title":"Include Javascipt","text":"<p>The <code>includeJS(String)</code> template call allows you to include a javascript file in the resulting page. Javascript files can be included in your project by placing them in a javascript/ directory in the project root.</p> <p>Example 1:</p> <pre><code>page root() {\n  includeJS(\"sdmenu.js\")\n}\n</code></pre> <p>It is also possible to include a Javascript file using an absolute URL. </p> <p>Example 2:</p> <pre><code>page root() {\n  includeJS(\"http://ajax.googleapis.com/ajax/libs/jquery/1.2.6/jquery.min.js\")\n}\n</code></pre>"},{"location":"reference/pages/#page-not-found-error","title":"Page Not Found Error","text":"<p>When an invalid URL is being requested from a WebDSL application, the default response is to give a 404 error. To customize this error page, define a <code>pagenotfound</code> page in your application.</p> <p>Example:</p> <pre><code>page pagenotfound() {\n  title{ \"myapp / page not found (404)\" }\n  main()\n  template body() {\n    par{ \"That page does not exist!\" }\n    par{ \"Maybe you can find what you are looking for using the search page.\" }\n  }\n}\n</code></pre>"},{"location":"reference/pages/#raw-output","title":"Raw output","text":"<p>By default, any template content will be escaped, if you want to include a string directly in the page source use rawoutput.</p> <p>Example:</p> <pre><code>rawoutput{\"&amp;nbsp;\"}\n</code></pre>"},{"location":"reference/pages/#html-element-attributes-on-template-call","title":"HTML Element Attributes on Template Call","text":"<p>Setting HTML element attributes is supported for calls to built-in templates, the syntax is as follows:</p> <pre><code>templatename(...)[attrname=e, ...]{ ... }\n</code></pre> <p><code>attrname</code> is an attribute name, and <code>e</code> is a webdsl expression such as <code>\"foo\"</code> or <code>\"foo\"+bar</code>.</p> <p>Example:</p> <pre><code>page root(){ \n  var somevalue := \"lo\"\n  image(\"/images/logosmall.png\")[alt = somevalue+\"go\", longdesc = \"blablabla\"]\n  navigate root()[title = \"root page\"]{ \"root\" }\n}\n</code></pre>"},{"location":"reference/pages/#override-modifier","title":"Override Modifier","text":"<p>Template and page definitions can be overridden using the <code>override</code> modifier, e.g. to override a built-in page such as <code>pagenotfound</code>:</p> <pre><code>override page pagenotfound(){\n  \"page does not exist!\"\n}\n</code></pre>"},{"location":"reference/pages/#sql-logging-for-page-rendering","title":"SQL Logging for Page Rendering","text":"<p>add <code>?logsql</code> after the URL of a page to get a log of all the SQL queries executed to render that page</p> <p>for applications with access control enabled, accessing this log is disabled by default, it can be enabled using an access control rule:</p> <pre><code>rule logsql { check }\n</code></pre> <p>e.g.</p> <pre><code>rule logsql { principal.isAdmin }\n</code></pre>"},{"location":"reference/production-server/","title":"Production Server","text":""},{"location":"reference/production-server/#tomcat","title":"Tomcat","text":"<p>We use the following settings for Tomcat on our production server (NixOS/Linux):</p> <pre><code>-Xms350m \n-Xss8m \n-Xmx8G \n-Djava.security.egd=file:/dev/./urandom \n-XX:MaxPermSize=512M \n-XX:PermSize=512M \n-XX:-UseGCOverheadLimit \n-XX:+UseCompressedOops\n-XX:+HeapDumpOnOutOfMemoryError \n-XX:HeapDumpPath=/var/tomcat/logs/heapdump.hprof\n</code></pre>"},{"location":"reference/production-server/#details","title":"Details","text":"<pre><code>-Xmx8G\n</code></pre> <p>The most important setting, maximum heap space, value depends on size/number of applications, but the default setting is usually too low. If this setting is too high for your JVM, it won't start at all.</p> <pre><code>-XX:MaxPermSize=512M\n</code></pre> <p>This allows redeploying the application without running into permgenspace errors too quickly.</p> <pre><code>-Djava.security.egd=file:/dev/./urandom\n</code></pre> <p>The default implementation for random can be too slow (java.util.UUID.randomUUID is used for entity identifiers, including RequestLogEntry) see http://stackoverflow.com/questions/137212/how-to-solve-performance-problem-with-java-securerandom</p>"},{"location":"reference/production-server/#monitoring-and-debugging","title":"Monitoring and Debugging","text":"<p>Use <code>jvisualvm</code> to inspect the Tomcat process, this allows you to look at the heap and running threads and create dumps for later inspection. A heap dump can also be created using:</p> <pre><code>jmap -F -dump:format=b,file=&lt;filename&gt; &lt;process id&gt;\n</code></pre> <p>The Eclipse Memory Analyzer can be used to inspect this file, get it from http://www.eclipse.org/mat/</p> <p>If the tomcat process becomes unresponsive try</p> <pre><code>kill -3 &lt;process id&gt;\n</code></pre> <p>to generate a thread dump in the catalina.out log.</p>"},{"location":"reference/production-server/#mysql","title":"MySQL","text":"<p>See the MySQL page.</p>"},{"location":"reference/production-server/#lightweight-vps","title":"Lightweight VPS","text":"<p>See the Lightweight VPS page, it also contains a step-by-step installation guide.</p>"},{"location":"reference/queries/","title":"Queries","text":"<p>WebDSL supports a subset of HQL. You can use these queries directly in your webdsl program, by for example assigning them to variables. An example:</p> <pre><code>  // select all updates\n  var allUpdates : [Update] := from Update;\n</code></pre>"},{"location":"reference/queries/#escaping","title":"Escaping","text":"<p>Often it is useful to use values from your WebDSL program inside a query. To do this you can escape WebDSL expressions by prefixing them with a tilde (<code>~</code>). </p> <p>To escape to WebDSL inside a query, prefix the expression with ~. For example:</p> <pre><code>  // Select all users whose username is \"zef\"\n  var username : String := \"zef\";\n  var users : [User] := from User as u where u.username = ~username;\n</code></pre>"},{"location":"reference/queries/#notes","title":"Notes","text":"<ul> <li>Limit accepts either one or two arguments. With one argument it just limits, but in the two argument form, the first argument describes the <code>offset</code>. Even though <code>offset</code> is valid SQL, it's not a valid keyword to use in WebDSL queries, even though it is a valid keyword in other places in WebDSL so will be highlighted in your editor.</li> </ul>"},{"location":"reference/queries/#example-a-paginated-view","title":"Example: a paginated view","text":"<pre><code>// A paginated for, showing 10 items per page and prefetch the \"user\" column (in a template)\nvar page : Int := 0;\nfor(update : Update in from Update as u left join fetch u.user order by u.date desc limit 10*page, 10) {\n   output(update.text)\n}\n</code></pre>"},{"location":"reference/recurring-tasks/","title":"Recurring Tasks","text":"<p>Recurring task allow you to execute a certain function in set interval, e.g. every minute, 5 hours or every week. For this WebDSL uses the following syntax (which is subject to change): <pre><code>function someFunction() {\n  log(\"I was executed!\");\n}\n\ninvoke someFunction() every 5 minutes\n</code></pre> If the called function returns anything, this value is discarded. Functions invoked in this manner have access to entities and global variables, but not session data (because the function is not invoked by a user).</p> <p>Syntax of the time intervals: <pre><code>TimeInterval = TimeIntervalPart*\nTimeIntervalPart = Exp \"weeks\"\nTimeIntervalPart = Exp \"days\"\nTimeIntervalPart = Exp \"hours\"\nTimeIntervalPart = Exp \"minutes\"\nTimeIntervalPart = Exp \"seconds\"\nTimeIntervalPart = Exp \"milliseconds\"\n</code></pre></p> <p>So valid time intervals are: <pre><code>1 hours // note the plural\n1 hours 10 minutes // repeat every 70 minutes\n2 weeks 10 milliseconds\n</code></pre></p>"},{"location":"reference/request-processing/","title":"Request Processing","text":"<p>Users interact with web applications through the browser. This     process consists of request and response strings being     exchanged between the web server and the browser. A form is defined by a response     string, which is interpreted by the browser to produce     components that allow user interaction. A user can fill in     data in a text field, and press the submit button. The browser     first collects the data from the form input fields, and     constructs a request string to send to the web server, which     receives the request string and parses it. Values from input     fields can be accessed separately but are represented as     strings. A web application bears the responsibility of     converting these strings to actual types to be used in further     processing of the request. In WebDSL, the conversion of request parameters is done automatically. This is the first phase of the request processing lifecycle. The request processing lifecycle consists of the following phases:</p> <ul> <li>Convert request parameters</li> <li>Update model values</li> <li>Validate forms</li> <li>Handle actions</li> <li>Render page or redirect</li> </ul> <p>Request parameter conversion is not possible if the incoming     value is not well-formed. For example, a value of     \"3f\" cannot be converted to an integer. Since a     failed conversion invalidates any input this triggers re-rendering the page with error messages. </p> <p>In the first phase, parameters are decoded from strings. In     the 'Update Model Values' phase, these parameters are     automatically inserted in data model entities. WebDSL supports     such data binding through input elements.  For     example, the element </p> <pre><code>input(u.email)\n</code></pre> <p>declares that an     input field should be displayed with the current contents of     the email property of variable u of type     User. Furthermore, when a user submits the containing     form with a new value in the email field, the new value will     be assigned to u.email. </p> <p>Data binding requires assignments to and collection     operations on entity properties which trigger validation     checks defined in the entity. When a property is validated     each validation rule defined on that property is checked,     possibly producing multiple error messages. When at least one     validation fails during this phase, further processing is     disabled and errors are displayed.</p> <p>When the model is updated and entity validations are checked,     there can still be validation rules in pages which need to be     enforced. The form validation phase     traverses the form that is submitted and checks any validation     it encounters. An invalid result prevents any action from     executing and produces an error in the page.</p> <p>When all validation checks in previous phases have succeeded,     the selected action is executed. During the execution of an     action there can be action assertions that validate the data in     the current execution state of the action.  Moreover, data     invariants are still checked during this phase and can produce     validation errors as well. If any validation check fails, the     entire action is cancelled (clearing all changes made during that request).</p> <p>Validation messages produced in the previous phases result in     a re-render of the same page with error messages inserted. If     all validations succeed, the action results in a redirect to     the same or a different page.</p> <p>Notes:</p> <ul> <li>Unless validation fails at some point, all changes made to entities are persisted, except for transient entities (new entities that weren't in the database before), these need to be explicitly saved (by calling entity.save()).</li> </ul>"},{"location":"reference/search/","title":"Search","text":"<p>WebDSL supports simple search capabilities through Lucene. Entity properties can be marked as \"searchable\" to subsequently be indexed: <pre><code>entity Message {\n  subject : String (searchable)\n  text    : Text   (searchable)\n  sender  : ForumUser\n}\n</code></pre> The searchable can be applied to the following built-in WebDSL types: String, Text, WikiText, Int, Long, Float and date types. Properties of user defined entity types are currently not supported to be searchable (i.e. sender in the previous example).</p> <p>If one or more properties of an entity are marked as searchable, a set of <code>searchEntity</code> functions are generated, in this case: <pre><code>function searchMessage(query : String) : [Message]\nfunction searchMessage(query : String, limit : Int) : [Message]\nfunction searchMessage(query : String, limit : Int, offset : Int) : [Message]\n</code></pre> Which can be used from anywhere. For instance on a search page:</p> <pre><code>page search(query : String) {\n  var newQuery : String := query;\n  action doSearch() {\n    return search(newQuery);\n  }\n\n  title { \"Search\" }\n  form {\n    input(newQuery)\n    submit(\"Search\", doSearch())\n  }\n  for(m : Message in searchMessage(query, 50)) {\n    output(m)\n  }\n}\n</code></pre> <p>The query syntax adheres to Lucene's query syntax as does the scoring.</p> <p>All data to be indexed (properties marked as \"searchable\") and queries are analyzed using the default analyzer of Lucene. This means that punctuation and stop words (commonly used words like 'the', 'to', 'be') are stripped from text and text is transformed to tokens in lowercase.</p>"},{"location":"reference/search/#index-location","title":"Index location","text":"<p>WebDSL stores its search index in the <code>/var/indexes/APPNAME</code> directory. This is currently not configurable. Make sure this directory is readable and writeable for the user that runs tomcat.</p>"},{"location":"reference/search/#indexing","title":"Indexing","text":"<p>When the <code>searchable</code> annotations or search mappings are added/changed when data is already in the database, the search index has to be recreated. When your application has been deployed , go to the directory in which it was deployed, for instance /var/tomcat/webapps/yourapp. In this directory you will find a <code>webdsl-reindex</code> script (for *nix only) which will invoke ant reindex and fixes permissions of the index directory.  By default, the reindex task completely reindexes all searchable entities. As of WebDSL version 1.2.9 it also accepts entity names as command line argument (separated by whitespace) to reindex a subset of entities.</p> <p>Reindex all entities *nix: </p> <pre><code>  # sudo sh webdsl-reindex\n</code></pre> <p>Windows as of 1.3.0:</p> <pre><code>  # ant reindex\n</code></pre> <p>before 1.3.0:</p> <pre><code>  # ant reindex -f build.reindex.xml\n</code></pre> <p>Reindex a subset of entities *nix:  </p> <pre><code>  # sudo sh webdsl-reindex Entity1 Entity2 Etc\n</code></pre> <p>Windows: as of 1.3.0:</p> <pre><code>  # ant reindex -Dentities=\"Entity1 Entity2 Etc\"\n</code></pre> <p>before 1.3.0:</p> <pre><code>  # ant reindex -f build.reindex.xml -Dentities=\"Entity1 Entity2 Etc\"\n</code></pre> <p>Note: Don't start your application during reindexing, it will crash because it can't initialize the directory provider. So reindexing should be done before starting or when already running your application.</p> <p>A demo of the search functionality can be seen on Reposearch.</p>"},{"location":"reference/send-email/","title":"Send Email","text":"<p>This page describes how to create an email template and send email from your application. Make sure the email settings are configured in application.ini, see Application Configuration. If you are interested in storing email addresses in an entity, have a look at the Email type.</p> <p>Defining an email template:</p> <pre><code>email testemail(us : User) {\n  to(us.mail)\n  from(\"webdslorg@gmail.com\")\n  subject(\"Test Email\")\n\n  par{ \"Dear \" output(us.name) \", \" }\n  par{\n    \"Look at your profile page: \"\n    navigate(user(us)){\"go\"}\n    //navigate will become an absolute link in the email\n  }\n}\n</code></pre> <p>Sending email:</p> <pre><code>  email testemail(someuser);\n</code></pre> <p>The actual sending happens asynchronously, if there are issues while the application is trying to send an email, it will retry that email after 3 hours. If necessary, you can inspect and influence this email queue through the <code>QueuedEmail</code> entity:</p> <pre><code>entity QueuedEmail {\n  body : String (length=1000000) \n    //Note: default length for string is currently 255\n  to : String (length=1000000)\n  cc : String (length=1000000)\n  bcc : String (length=1000000)\n  replyTo : String (length=1000000)\n  from : String (length=1000000)\n  subject : String (length=1000000)\n  lastTry : DateTime \n}\n</code></pre>"},{"location":"reference/services/","title":"Services","text":"<p>WebDSL includes a simple way to define string and JSON-based webservices.</p>"},{"location":"reference/services/#json-api","title":"JSON API","text":"<p>The JSON interface is defined as follows:</p> <pre><code>  native class org.json.JSONObject as JSONObject {\n    constructor()\n    constructor(String)\n    get(String) : Object\n    getBoolean(String) : Bool\n    getDouble(String) : Double\n    getInt(String) : Int\n    getJSONArray(String) : JSONArray\n    getJSONObject(String) : JSONObject\n    getString(String) : String\n    has(String) : Bool\n    names() : JSONArray\n    put(String, Object)\n    toString() : String\n    toString(Int) : String\n  }\n\n  native class org.json.JSONArray as JSONArray {\n    constructor()\n    constructor(String)\n    get(Int) : Object\n    getBoolean(Int) : Bool\n    getDouble(Int) : Double\n    getInt(Int) : Int\n    getJSONArray(Int) : JSONArray\n    getJSONObject(Int) : JSONObject\n    getString(Int) : String\n    length() : Int\n    join(String) : String\n    put(Object)\n    remove(Int)\n    toString() : String\n    toString(Int) : String\n  } \n</code></pre> <p>Example use in WebDSL:</p> <pre><code>function myJsonFun() : String {\n    var obj := JSONObject(\"{}\");\n    obj.put(\"name\", \"Pete\");\n    obj.put(\"age\", 27);\n    return obj.toString();\n    // Will return '{\"name\": \"Pete\", \"age\": 27}'\n}\n</code></pre>"},{"location":"reference/services/#defining-services","title":"Defining services","text":"<p>A service is simply a WebDSL function that uses the <code>service</code> keyword instead of <code>function</code>, you don't have to specify a return type, it will convert anything you return to a string (using <code>.toString()</code>):</p> <pre><code>entity Document {\n  title : String (id, name)\n  text  : Text\n}\n\nservice document(id : String) {\n  if(getHttpMethod() == \"GET\") {\n     var doc := findDocument(id);\n     var json := JSONObject();\n     json.put(\"title\", doc.title);\n     json.put(\"text\", doc.text);\n     return json;\n  }\n  if(getHttpMethod() == \"PUT\") {\n    var doc := getUniqueDocument(id);\n    var json := JSONObject(readRequestBody());\n    doc.text := json.getString(\"text\");\n    return doc.title;\n  }\n}\n</code></pre> <p>services are mapped to <code>/serviceName</code>, e.g. <code>/document</code>. Here's a few sample requests to test (note, these are services part of an application called \"hellojson\"):</p> <pre><code>$ curl -X PUT 'http://localhost:8080/hellojson/document/my-first-doc' \\\n       -d '{\"text\": \"This is my first document\"}'\nmy-first-doc\n$ curl http://localhost:8080/hellojson/document/my-first-doc\n{\"text\":\"\"This is my first document\",\"title\":\"my-first-doc\"}\n</code></pre> <p>But, like pages, services can also have entities as arguments:</p> <pre><code>service documentJson(doc : Document) {\n   var obj := JSONObject();\n   obj.put(\"title\", doc.title);\n   obj.put(\"text\", doc.text);\n   return obj;\n}\n</code></pre>"},{"location":"reference/session-entities/","title":"Session Entities","text":"<p>Storing data in the session context on the server is done using session entities. Example:</p> <pre><code>session shoppingcart {\n  products : [Product]\n}\n</code></pre> <p>A session entity name is a globally visible variable in the application code. The entity object is automatically instantiated and saved, one for each browser session accessing the application.</p> <p>Typically, session data is used for keeping track of authentication state, but it can also be used for temporarily storing data for anonymous users. A common oversight with session data is that it is shared between tabs in a browser.</p> <p>To initialize session data to default values, remember that using <code>:=</code> after a field means that that field is a derived property.  That also means you can't assign to this field. To set defaults use <code>(default = value)</code>. Example:</p> <pre><code>session history {\n  number_of_entries : Int (default = 10)\n}\n</code></pre> <p>Declaring an access control principle, e.g. <code>principal is User with credentials name,password</code>, automatically creates a <code>securityContext</code> session entity. For more information about access control see the Access Control page.</p> <p>Session entities can also be extended with extra properties. Example:</p> <pre><code>extend session shoppingcart{\n  lastSearchQuery : String\n}\n</code></pre> <p>Session data times out by default, this timeout length can be adjusted in the <code>application.ini</code> file, e.g. <code>sessiontimeout=10080</code>. This time is specified in minutes. More information about application settings is shown on the Application Configuration page.</p>"},{"location":"reference/styling/","title":"Styling","text":"<p>Styling of WebDSL pages is done using CSS. In the application directory add the following directory and file:</p> <pre><code>stylesheets/common_.css\n</code></pre> <p>This CSS file will be automatically included when deploying the application. Other CSS files can be included using <code>includeCSS</code> (in this example the included file is located at stylesheets/jquery-ui.css):</p> <pre><code>includeCSS(\"jquery-ui.css\")\n</code></pre> <p>When the application is deployed in the Eclipse plugin you can edit the CSS file directly in the tomcat directory (don't forget to also save the CSS file back to your project): </p> <pre><code>WebContent/stylesheets/common_.css\n</code></pre> <p>For deployment to external tomcat this directory is:</p> <pre><code>tomcat/webapps/appname/stylesheets/common_.css\n</code></pre> <p>The Firebug add-on for Firefox can be very helpful in figuring out the page structure, other browsers have similar development tools.</p> <p>Explicit hooks for CSS can be added using the XML embedding:</p> <pre><code>template someTemplate(){ \n  &lt;div class=\"mydiv\"&gt;\n    \"content of mydiv\"\n  &lt;/div&gt;\n}\n</code></pre> <p>Note that the \"mydiv\" is a WebDSL expression, so this could also be stored in an entity and retrieved using a field access:</p> <pre><code>&lt;div class=user.cssclass&gt;\n</code></pre> <p>Classes for styling can also be added to a template call (separate from the regular arguments):</p> <pre><code>input[class=\"mynameinput\"](u.name)\n</code></pre> <p>If you want to define your own template that takes such extra arguments, use <code>all attributes</code>:</p> <pre><code>page root(){\n  someOtherTemplate[class=\"importantdiv\"]{ \"content\" }\n}\n\ntemplate someOtherTemplate(){ \n  &lt;div all attributes&gt;\n    elements\n  &lt;/div&gt;\n}\n</code></pre> <p>The <code>span</code> template modifier adds a span around a template, which can then be used as a hook for CSS:</p> <pre><code>template span spanTemplate(){ \"span around me\" }\n</code></pre>"},{"location":"reference/synchronization-framework/","title":"Synchronization Framework","text":"<p>WebDSL provides possibility to generate code for a synchronization framework combined with mobl. Nevertheless, the webservices are open to be used by other applications.</p>"},{"location":"reference/synchronization-framework/#required-steps","title":"Required steps","text":"<p>The steps that are required for the synchronization framework are the following:</p> <ul> <li>A WebDSL application that contains a (complete) model</li> <li>Additional settings for the generation</li> <li>Generation of the framework</li> <li>Importing of the generated framework</li> <li>A mobl or other external application that uses the synchronization</li> </ul>"},{"location":"reference/synchronization-framework/#application","title":"Application","text":"<p>The framework is meant as an extension to a WebDSL application. This means that it requires at least a full model in the application to generate a working framework.</p>"},{"location":"reference/synchronization-framework/#additional-settings","title":"Additional Settings","text":"<p>The synchronization framework requires and allows some adaption by additional settings. Those settings can be added in the synchronization settings for each entity. </p> <pre><code>entity Example{\n    synchronization configuration{\n    }     \n}\n</code></pre> <p>The following settings can be configured:</p> <ul> <li>TopLevel entity(required)</li> <li>Access control rules for objects</li> <li>Restricted properties</li> </ul>"},{"location":"reference/synchronization-framework/#toplevel-entity","title":"TopLevel Entity","text":"<p>The data synchronization requires a Toplevel Entity to enable the data partitioning. This is simple a flag that specifies that objects of this type represent a data partition. Additionally, this setting requires a String property that can be used to represent this object. </p> <pre><code>entity Car{\n    registrationIdentifier : String\n\n    synchronization configuration{\n        toplevel name property : registrationIdentifier\n    }     \n}\n</code></pre>"},{"location":"reference/synchronization-framework/#access-control","title":"Access Control","text":"<p>The data synchronization framework enable external sources to read and modify data on the server with the web application. The framework allows control over which data can be accessed by who. This can only be specified when the a principal is defined in the web application. There are three different levels that can be specified for each entity: read, write and create. It is recommended to specify those rules for each entity.</p> <pre><code>entity Dummy{\n    name : String\n\n    synchronization configuration{\n        access read: true\n        access write: Logedin()\n        access create: principal().isAdmin()\n    }     \n}\n</code></pre>"},{"location":"reference/synchronization-framework/#restricted-properties","title":"Restricted Properties","text":"<p>The last setting that can be configured is that of restricted properties. It allows to simplify the data model that you want to use on synchronization. The properties that are specified in this configuration are removed from the shared data and also for the calculation of data partitioning.</p> <pre><code>entity Person{\n    surName : String\n    firstName : String\n    fullName : String\n\n    synchronization configuration{\n        restricted properties : surName, firstName\n    }     \n}\n</code></pre>"},{"location":"reference/synchronization-framework/#generation-of-the-framework","title":"Generation of the framework","text":"<p>Generation of the framework is easy. After specifying the settings, open the main application file in the IDE. Then select the generate synchronization framework from the Transform menu.</p>"},{"location":"reference/synchronization-framework/#importing-of-the-framework","title":"Importing of the framework","text":"<p>The framework is generated in the folder webservices. To enable the synchronization framework inside the web application you need to include the main file of the framework.</p> <pre><code>application TestApp\nimports webservices/services/interface\n</code></pre>"},{"location":"reference/synchronization-framework/#mobl-or-other-remote-application","title":"mobl or other remote application","text":"<p>The framework generates code for mobl that enable synchronization in a mobl application. However, it still needs a full mobile application. </p> <p>Other applications can use the available webservices to synchronize with the application.</p>"},{"location":"reference/synchronization-framework/#what-is-generated","title":"What is generated","text":"<p>The framework generates a lot of files, but what does it contain:</p> <ul> <li>WebDSL<ul> <li>Synchronization core</li> <li>Webservices</li> <li>Mappers</li> <li>Serializers</li> <li>Data Partitioning</li> <li>Access Control</li> <li>Authentication</li> </ul> </li> <li>mobl<ul> <li>Model</li> <li>Mappers</li> <li>Integration functions</li> <li>Authentication</li> <li>Data Browser</li> </ul> </li> </ul>"},{"location":"reference/synchronization-framework/#synchronization-core","title":"Synchronization core","text":"<p>The core of the synchronization contains functions that overlook the main functionality of the synchronization. Identification, detection and resolution of updates.</p>"},{"location":"reference/synchronization-framework/#webservices","title":"Webservices","text":"<p>The webservices are used for communication with mobl of other applications. This is a layer on the core of the synchronization. All services are called by post request to the url:</p> <pre><code> http://&lt;websiteurl&gt;/webservice/&lt;webservicename&gt;\n</code></pre> <p>The following services are available and should be used in that order:</p> <ul> <li>getTopLevelEntities</li> <li>getTimeStamp</li> <li>syncNewObjects</li> <li>syncDirtyObjects</li> <li>sync"},{"location":"reference/synchronization-framework/#webdsl-mappers","title":"WebDSL mappers","text":"<p>The mappers are meant for mapping the updates to local values. The also have some additional statements for checking validity of the input. There are two mappers, one for modification and one for creation. Currently, they contain the same code. This is done so they can be overwritten separately.</p> <ul> <li>mapperEdit <li>mapperNew"},{"location":"reference/synchronization-framework/#serializers","title":"Serializers","text":"<p>The values in the database are not in a format that can be send through webservices. Therefor, the framework has 3 functions for each entity</p> <ul> <li>toJSON: a full representation of the object in JSON </li> <li>toSimpleJSON: a JSON representation of the objects only containing simple properties </li> <li>toMinimalJSON: a JSON representation of object meant as reference. Only contains the id.</li> </ul>"},{"location":"reference/synchronization-framework/#data-partitioning","title":"Data Partitioning","text":"<p>The synchronization framework uses data partitioning to reduce the amount of data for mobile applications. This solution chooses to use object relations to determine if objects are linked to the TopLevel entity.  This requires that each entity has a function to calculate the related objects. </p> <p>The main function of data partitioning gets a closure of a data partitioning by calling the related functions until there are no new objects any more.</p>"},{"location":"reference/synchronization-framework/#access-control_1","title":"Access Control","text":"<p>As mentioned before you can specify three rules for the access control of objects. Those rules are turned into functions named:</p> <ul> <li>mayReadSynchronize</li> <li>mayModifySynchronize</li> <li>mayCreateSynchronize</li> </ul>"},{"location":"reference/synchronization-framework/#authentication","title":"Authentication","text":"<p>The access control requires that remote applications can login to the application. To improve security a device can register itself and get a devicekey. Which then can be used to authenticate instead of using the password. Those keys are stored as an additional property of the principal and if removed the device is de-authenticated.</p>"},{"location":"reference/synchronization-framework/#model","title":"Model","text":"<p>A big part of the data synchronization is about the model. The model is basically a copy of that of WebDSL only with other mobl types. It should also be used for developers that try to understand what model is expected for the webservices. The following sections are additional notes to the creation of the model.</p>"},{"location":"reference/synchronization-framework/#restricted-types","title":"Restricted types","text":"<p>Mobl has a more restricted set of types. This let to the choice to not support all types. properties with the following types are removed:</p> <ul> <li>Secret</li> <li>File</li> <li>Image</li> <li>Patch</li> </ul>"},{"location":"reference/synchronization-framework/#class-hierarchy","title":"class Hierarchy","text":"<p>Mobl does not support class Hierarchy. To support all entities from the application the synchronization framework has flatten the hierarchy. The influence can be found in the renamed properties that now have a prefix of there original class name. And a additional property that tells the actual type: Typefield</p>"},{"location":"reference/synchronization-framework/#toplevel-properties","title":"TopLevel properties","text":"<p>The data partitioning requires some additional information. This is stored in the property sync and lastSynced.</p>"},{"location":"reference/synchronization-framework/#search-annotations","title":"Search annotations","text":"<p>The search annotations in mobl are expensive and better can be removed from the model.</p>"},{"location":"reference/synchronization-framework/#mappers","title":"Mappers","text":"<p>Mobl also needs some mappers of the values. However the limited difference between mobile and JSON representation, allows it to use the function generated by the mobl compiler.</p>"},{"location":"reference/synchronization-framework/#integration-functions","title":"Integration functions","text":"<p>There are some integration functions for mobl that can be used to call synchronization processes. It can be seen as the core of the synchronization for mobl applications.</p>"},{"location":"reference/synchronization-framework/#authentication_1","title":"Authentication","text":"<p>The authentication are some functions to enable the devicekey setup. It has the following functions:</p> <ul> <li>authenticate</li> <li>registerDevice</li> <li>logoutDevice</li> </ul> <p>The logging out of the device also cleans the database for security reasons.</p>"},{"location":"reference/synchronization-framework/#data-browser","title":"Data Browser","text":"<p>As a start the generated framework has a data browser included to have easy start with the application. </p> <p>It has a page for every entity, namely: showSimple <p>Those pages allow to click through the data stored locally.</p>"},{"location":"reference/synchronization-framework/#additional-notes","title":"Additional notes","text":""},{"location":"reference/synchronization-framework/#version-number","title":"version number","text":"<p>The send version numbers of each objects can be used to change the protocol of resolution of outdated objects. Giving it an high number will interpret that the object is newer than that of the system.</p>"},{"location":"reference/synchronization-framework/#collections","title":"Collections","text":"<p>mobl doesn't have difference between set and lists, it only supports collections. The biggest problem is that the ordering can not be trust.</p>"},{"location":"reference/testing/","title":"Testing","text":"<p>Tests for the entities and functions operating on those entities can be defined in test blocks.</p> <p>Example:</p> <pre><code>test capitalizeTest {\n  var u := User{ name := \"alice\" };\n  u.capitalizeName();\n  assert(u.name == \"Alice\");\n}\nentity User {\n  name : String\n  function capitalizeName(){\n    var temp := name.explodeString();\n    temp.set(0,temp.get(0).toUpperCase());\n    name := temp.concat();\n  }\n}\n</code></pre> <p>The 'webdsl test appname' command builds the app and runs the tests, an error will be returned when any of the tests fail. This command will create a new application.ini and uses an in-memory H2 Database Engine.</p> <pre><code>webdsl test myapp\n</code></pre> <p>If the settings in the existing application.ini can be used for testing, run the 'webdsl check' command instead.</p> <pre><code>webdsl check\n</code></pre> <p>Multiple test blocks can be defined in an application, each test will run with a fresh initialization of the database, the global variables and global init blocks are handled before each test.</p> <p>Use assert calls to verify the correctness of results. When the assert argument evaluates to false, the test run will show the location of the failing assert. If the assert consists of one == or != comparison, the two compared results will also be printed upon failure. The assert function has an optional second argument, a String which can be used to pass a message that will be shown when the assert fails.</p> <p>Signatures:</p> <p>assert(Bool)</p> <p>assert(Bool, String)</p> <p>Testing example: tests for built-in Text type: text.app.</p>"},{"location":"reference/testing/#web-testing","title":"Web testing","text":"<p>The resulting web application can also be automatically tested by using </p> <pre><code>webdsl test-web myapp\n</code></pre> <p>or</p> <pre><code>webdsl check-web\n</code></pre> <p>where 'test-web' will automatically create an application.ini and 'check-web' will use an existing one.</p> <p>These commands start up tomcat and run the tests. Tests are currently expressed by calls to WebDriver with HTMLUnit behind it (a better abstraction specific to WebDSL tests is planned, current web testing is mainly to support testing the compiler). The interface is described here (see Native Java Interface):</p> <pre><code>https://svn.strategoxt.org/repos/WebDSL/webdsls/trunk/src/org/webdsl/dsl/languages/test/native-classes.str\n</code></pre> <p>Example:</p> <pre><code>test datavalidation {\n  var d : WebDriver := HtmlUnitDriver();\n\n  d.get(navigate(root()));\n  assert(!d.getPageSource().contains(\"404\"), \"root page may not produce a 404 error\");\n\n  var elist : [WebElement] := d.findElements(SelectBy.tagName(\"input\"));\n  assert(elist.length == 4, \"expected 4 &lt;input&gt; elements\");\n\n  elist[1].sendKeys(\"123\");\n  elist[2].sendKeys(\"111\");\n\n  elist[3].click();\n\n  var pagesource := d.getPageSource();\n\n  var list := pagesource.split(\"&lt;hr/&gt;\");\n\n  assert(list.length == 3, \"expected two occurences of \\\"&lt;hr/&gt;\\\"\");\n\n  assert(list[1].contains(\"inputcheck\"), \"cannot find inputcheck message\");\n  assert(list[2].contains(\"formcheck\"), \"cannot find formcheck message\");\n</code></pre> <p>}</p> <p>Source:</p> <pre><code>https://svn.strategoxt.org/repos/WebDSL/webdsls/trunk/test/succeed-web/data-validation/validate-in-elements.app\n</code></pre>"},{"location":"reference/types/","title":"Types","text":"<p>This section lists all the built-in types available in WebDSL.</p> <p>There are multiple types that are equivalent to String. These types can have different validation rules, functions, inputs, and outputs. Converting between these types can be done with casts, e.g.</p> <pre><code>var : Secret := url(\"123\") as Secret;\n</code></pre> <p>The String compatible types are:</p> <ul> <li>String</li> <li>Text</li> <li>WikiText</li> <li>Secret</li> <li>Email</li> <li>URL</li> <li>Patch</li> </ul> <p>Similarly, the Date times are equivalent as well:</p> <ul> <li>Date</li> <li>Time</li> <li>DateTime</li> </ul>"},{"location":"reference/types/#enums","title":"Enums","text":"<p>Enumeration types consist of a list of options that contain both an identifier and a visible name. You define them as follows: <pre><code>enum Gender {\n  maleGender(\"Male\"),\n  femaleGender(\"Female\"),\n  otherGender(\"Other\"),\n}\n</code></pre> You can use them as follows: <pre><code>entity User {\n  gender : Gender\n}\n\npage somePage() {\n  var u : User;\n  input(u.gender) // shows a drop-down\n  output(u.gender.name) // shows either Male or Female\n}\n</code></pre> Or, in action code: <pre><code>function setMale(u : User) {\n  u.gender := maleGender;\n}\n</code></pre></p> <p>Note that internally an enumeration becomes an entity declaration with a name property for the visible name. The options become global variable declarations that get initialized once. Visible names can be updated using regular WebDSL forms.</p>"},{"location":"reference/types/#string","title":"String","text":"<p>Represents a string of characters. Example:</p> <pre><code>var s : String := \"Hello world\";\n</code></pre> <p>The default value for String properties and variables is \"\".</p>"},{"location":"reference/types/#functions","title":"Functions","text":"<p>contains(s: String):Bool</p> <p>Tests whether s is a substring of this string.</p> <p>length():Int</p> <p>Returns the length of this string.</p> <p>parseInt():Int</p> <p>Returns the Int value in this string. If this string does not contain a valid Int value, this function returns null.</p> <p>parseUUID():UUID</p> <p>Returns the UUID value in this string. If this string does not contain a valid UUID value, this function returns null.</p> <p>toUpperCase():String</p> <p>Returns this string in uppercase.</p> <p>toLowerCase():String</p> <p>Returns this string in lowercase.</p> <p>split():[String]</p> <p>Returns the characters in this string as separate strings in a list.</p> <p>split(separator:String):[String]</p> <p>Returns a list of strings produced by splitting this string around matches of separator.</p> <p>makePatch(new : String):Patch</p> <p>Creates a Patch from this String to the new String, see Patch.</p> <p>diff(new : String):[String]</p> <p>Creates a list of <code>String</code>s describing the differences between this String and the new String.</p> <p>trim(): String</p> <p>Returns this string, with leading and trailing whitespace omitted.</p>"},{"location":"reference/types/#list-functions","title":"List Functions","text":"<p>concat():String</p> <p>Concatenates the strings in this list of strings.</p> <p>concat(separator:String):String</p> <p>Concatenates the strings in this list of strings, separated by separator.</p>"},{"location":"reference/types/#int","title":"Int","text":"<p>Represents an integer number. Example:</p> <pre><code>var i : Int := 3;\n</code></pre> <p>The default value for Int properties and variables is 0.</p>"},{"location":"reference/types/#functions_1","title":"Functions","text":"<p>floatValue():Float</p> <p>Converts this value to a Float.</p> <p>toString():String</p> <p>Converts this value to a String.</p>"},{"location":"reference/types/#float","title":"Float","text":"<p>Represents a floating point number. Example:</p> <pre><code>var f : Float := 3.5;\n</code></pre> <p>The default value for Float properties and variables is 0f.</p>"},{"location":"reference/types/#functions_2","title":"Functions","text":"<p>round():Int</p> <p>Rounds this value to the nearest Int value.</p> <p>floor():Int</p> <p>Returns the largest Int that is less than or equal to this value.</p> <p>ceil():Int</p> <p>Returns the smallest Int that is greater than or equal to this value.</p> <p>toString():String</p> <p>Converts this value to a String.</p>"},{"location":"reference/types/#static-functions","title":"Static Functions","text":"<p>random():Float</p> <p>Produces a random Float between 0 and 1.</p>"},{"location":"reference/types/#bool","title":"Bool","text":"<p>Represents a truth value. Either <code>true</code> or <code>false</code>. Example:</p> <pre><code>var b : Bool := true;\n</code></pre> <p>The default value for Bool properties and variables is false.</p>"},{"location":"reference/types/#functions_3","title":"Functions","text":"<p>toString():String</p> <p>Converts this value to a String.</p>"},{"location":"reference/types/#list","title":"List","text":"<p>Represents an ordered list of items of a certain type. Example:</p> <pre><code>var l : [Int] := [1, 2, 3, 4];\n</code></pre> <p>Sorted output of lists can be created using the <code>for</code> loop filter in templates or actions:</p> <pre><code>for(u:User in [u1,u2,u3] order by u.name desc){\n  output(u)\n}\n</code></pre>"},{"location":"reference/types/#fields","title":"Fields","text":"<p>length</p> <p>Gives the number of items in the list.</p>"},{"location":"reference/types/#list-creation-expressions","title":"List Creation Expressions","text":"<p>List() <p>Creates an empty list of type <code>Entity</code>.</p> <p>List(..., Entity, ...) <p>Creates a list of type <code>Entity</code> with the elements resulting from the comma separated argument expressions.</p> <p>Example:</p> <pre><code>var list := List&lt;User&gt;(User{},SubSubUser{},SubUser{})\n</code></pre> <p>[Entity, ...]</p> <p>Creates a list of type <code>Entity</code> (type of first element) with the elements resulting from the comma separated expressions between the [ ].</p> <p>Example:</p> <pre><code>var list := [User{ name := \"test\" },SubUser{},uservar]\n</code></pre>"},{"location":"reference/types/#functions_4","title":"Functions","text":"<p>add(Entity)</p> <p>Adds the entity to this list.</p> <p>remove(Entity)</p> <p>Removes the first occurence of Entity in this list.</p> <p>clear()</p> <p>Removes all entities in this list.</p> <p>addAll(List/Set)</p> <p>Adds all entities of the List/Set to this list.</p> <p>set() : {Entity}</p> <p>Creates a Set containing the unique elements in this list.</p> <p>indexOf(Entity) : Int</p> <p>Returns the index of the first occurence of Entity in this list. Returns -1 if the Entity is not in this list.</p> <p>get(Int)</p> <p>Returns the element at location Int in this list.</p> <p>set(Int,Entity)</p> <p>Sets the list element at Int to Entity. If the Int is not within bounds, nothing is set, and a warning is shown in the log.</p> <p>insert(Int,Entity)</p> <p>Inserts the Entity at location Int in this list. If the Int is not within bounds, nothing is set, and a warning is shown in the log.</p> <p>removeAt(Int)</p> <p>Removes the element at location Int in this list. If the Int is not within bounds, nothing is set, and a warning is shown in the log.</p> <p>subList(from:Int,to:Int):[Entity]</p> <p>Returns a portion of this list between the specified from, inclusive, and to, exclusive.</p>"},{"location":"reference/types/#set","title":"Set","text":"<p>Represents an unordered collection of unique items of a certain type. Example</p> <pre><code>var s : Set&lt;Int&gt; := {1, 2, 3, 4};\n</code></pre> <p>Sorted output of sets can be created using the <code>for</code> loop filter in templates or actions. </p> <pre><code>for(u:User in [u1,u2,u3] order by u.name desc){\n  output(u)\n}\n</code></pre>"},{"location":"reference/types/#fields_1","title":"Fields","text":"<p>length</p> <p>Gives the number of items in the set.</p>"},{"location":"reference/types/#set-creation-expressions","title":"Set Creation Expressions","text":"<p>Set() <p>Creates an empty set of type Entity.</p> <p>Set(..., Entity, ...) <p>Creates a set of type Entity with the elements resulting from the comma separated argument expressions.</p> <p>Example:</p> <pre><code>var set := Set&lt;Person&gt;(Person{},SubSubPerson{},SubPerson{})\n</code></pre> <p>{Entity, ...}</p> <p>Creates a set of type Entity (type of first element) with the elements resulting from the comma separated expressions.</p> <p>Example:</p> <pre><code>var set : {Person} := {Person{ name := \"test\" },personvar}\n</code></pre>"},{"location":"reference/types/#functions_5","title":"Functions","text":"<p>add(Entity)</p> <p>Adds the entity to this set.</p> <p>remove(Entity)</p> <p>Removes Entity in this set.</p> <p>clear()</p> <p>Removes all entities in this set.</p> <p>addAll(List/Set)</p> <p>Adds all entities of the List/Set to this set.</p> <p>list() : [Entity]</p> <p>Creates a List containing the elements in this set.</p>"},{"location":"reference/types/#secret","title":"Secret","text":"<p>Represents a secret string (usually a password). The page input for a Secret is a masked textfield. The page output for a Secret is \"********\".</p> <p>Example:</p> <pre><code>var pass : Secret := \"123\";\n</code></pre> <p>The default value for Secret properties and variables is \"\".</p> <p>The Secret type is compatible with the String type, all the String functions can be used, and String literals can be assigned to Secret typed vars. A Secret can be cast to a String, this is necessary when calling functions or templates with String arguments. For example:</p> <pre><code>function test1(s:String){}\nfunction test2(pass:Secret){\n  test1(pass as String);    \n}\n</code></pre> <p>A String can also be cast to a Secret:</p> <pre><code>assert(pass == \"123\" as Secret)\n</code></pre>"},{"location":"reference/types/#functions_6","title":"Functions","text":"<p>all String functions</p> <p>Secret is compatible with String.</p> <p>check(input:Secret):Bool</p> <p>Checks the input Secret (not digested) against the digest version contained in this Secret.</p> <p>Example:</p> <pre><code>if (user.password.check(password)) {\n  securityContext.principal := us;\n  securityContext.loggedIn := true;\n}\n</code></pre> <p>digest():Secret</p> <p>Generates a digest of the clear-text password contained in this Secret.</p> <p>Example:</p> <pre><code>var s : Secret := \"123\";\ns := s.digest();\nassert(s.check(\"123\" as Secret));\n</code></pre>"},{"location":"reference/types/#email","title":"Email","text":"<p>Represents an e-mail address as a string. If you are interested in sending email from your application, have a look at the Send Email page. The page input for an Email is a textfield with the following validation: </p> <pre><code>validate(/[a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?/.match(this), \"Not a valid email address\")\n</code></pre> <p>The page output for Email is the same as String output.</p> <p>Example:</p> <pre><code>var address : Email := \"webdslorg@gmail.com\";\n</code></pre> <p>The default value for Email properties and variables is \"\". Add the 'not empty' annotation (or a custom validation) to an Email type property in an entity to disallow the empty string.</p> <p>The Email type is compatible with the String type, all the String functions can be used, and String literals can be assigned to Email typed vars. An Email can be cast to a String, this is necessary when calling functions or templates with String arguments. For example:</p> <pre><code>function test1(s:String){}\nfunction test2(address:Email){\n  test1(address as String);    \n}\n</code></pre> <p>A String can also be cast to an Email:</p> <pre><code>assert(address == \"123\" as Email)\n</code></pre>"},{"location":"reference/types/#functions_7","title":"Functions","text":"<p>all String functions</p> <p>Email is compatible with String.</p>"},{"location":"reference/types/#text","title":"Text","text":"<p>Represents a large string. The page input for a Text is a textarea. The page output for Text is the same as String output.</p> <p>Example:</p> <pre><code>var t : Text := \"123\";\n</code></pre> <p>The default value for Text properties and variables is \"\".</p> <p>The Text type is compatible with the String type, all the String functions can be used, and String literals can be assigned to Text typed vars. A Text can be cast to a String, this is necessary when calling functions or templates with String arguments. For example:</p> <pre><code>function test1(s:String){}\nfunction test2(t:Text){\n  test1(t as String);    \n}\n</code></pre> <p>A String can also be cast to a Text:</p> <pre><code>assert(t == \"123\" as Text)\n</code></pre>"},{"location":"reference/types/#functions_8","title":"Functions","text":"<p>all String functions</p> <p>Text is compatible with String.</p>"},{"location":"reference/types/#wikitext","title":"WikiText","text":"<p>Represents a large string with Markdown syntax support and internal page links. Internal page links in WikiText can be created using <code>[[page(arg)|caption]]</code>.</p> <p>The page input for WikiText is a textarea. The page output for WikiText processes the Markdown and page links and produces html elements.</p> <p>Example:</p> <pre><code>var t : WikiText := \"123\";\n</code></pre> <p>The default value for WikiText properties and variables is \"\".</p> <p>The WikiText type is compatible with the String type, all the String functions can be used, and String literals can be assigned to WikiText typed vars. A WikiText can be cast to a String, this is necessary when calling functions or templates with String arguments. For example:</p> <pre><code>function test1(s:String){}\nfunction test2(t: WikiText){\n  test1(t as String);    \n}\n</code></pre> <p>A String can also be cast to a WikiText:</p> <pre><code>assert(t == \"123\" as WikiText)\n</code></pre>"},{"location":"reference/types/#functions_9","title":"Functions","text":"<p>all String functions</p> <p>WikiText is compatible with String.</p>"},{"location":"reference/types/#patch","title":"Patch","text":"<p>Represents a patch. The page input for a Patch is the same as for Text. The page output for Patch is the same as for Text.</p> <p>Example:</p> <pre><code>var p : Patch := \"12345\".makePatch(\"24\");\n</code></pre> <p>The default value for Patch properties and variables is \"\".</p> <p>The Patch type is compatible with the String type, all the String functions can be used, and String literals can be assigned to Patch typed vars. A Patch can be cast to a String, this is necessary when calling functions or templates with String arguments. For example:</p> <pre><code>function test1(s:String){}\nfunction test2(p:Patch){\n  test1(p as String);    \n}\n</code></pre> <p>A String can also be cast to a Patch:</p> <pre><code>assert(p == \"123\" as Patch);\n</code></pre>"},{"location":"reference/types/#functions_10","title":"Functions","text":"<p>all String functions</p> <p>Patch is compatible with String.</p> <p>applyPatch(arg: String):String</p> <p>Applies this patch to the arg String.</p> <p>Example:</p> <pre><code>var s1 : Patch := \"12345\".makePatch(\"24\");\nassert(s1.applyPatch(\"12345\") == \"24\");\n</code></pre>"},{"location":"reference/types/#datetime","title":"DateTime","text":"<p>Represents both a date and a time. The page input for a DateTime is a textfield, the expected format is dd/MM/yyyy H:mm. The page output for a DateTime shows the DateTime formatted with dd/MM/yyyy H:mm. Use the format function to customize the output format.</p> <p>The default value for DateTime properties and variables is null.</p> <p>The DateTime type is compatible with the Time and Date types. A DateTime can be cast to these types.</p>"},{"location":"reference/types/#date-creation-functions","title":"Date Creation Functions","text":"<p>DateTime(String):DateTime</p> <p>Dates can be constructed using the Date constructor (expected format dd/MM/yyyy H:mm):</p> <pre><code>var dt : DateTime := DateTime(\"22/06/1983 22:08\");\n</code></pre> <p>DateTime(String, String):DateTime</p> <pre><code>var dt : DateTime := DateTime(\"12:12 05-1994-06\", \"mm:H MM-yyyy-dd\");\n</code></pre> <p>The second parameter represents the date/time formatting string.</p> <p>now():DateTime</p> <p>Creates a DateTime containing the current time and day.</p>"},{"location":"reference/types/#functions_11","title":"Functions","text":"<p>format(formatstring:String):String</p> <p>Format this DateTime using the formatstring. See Java SimpleDateFormat class documentation for formatstring syntax.</p> <p>before(arg:Date/Time/DateTime):Bool</p> <p>Tests whether this date and time is before the arg date and time.</p> <p>after(arg:Date/Time/DateTime):Bool</p> <p>Tests whether this date and time is after the arg date and time.</p> <p>addSeconds(amount:Int)</p> <p>Adds seconds, <code>amount</code> may be negative.</p> <p>addMinutes(amount:Int)</p> <p>Adds minutes, <code>amount</code> may be negative.</p> <p>addHours(amount:Int)</p> <p>Adds hours, <code>amount</code> may be negative.</p> <p>addDays(amount:Int)</p> <p>Adds days, <code>amount</code> may be negative.</p> <p>addMonths(amount:Int)</p> <p>Adds months, <code>amount</code> may be negative.</p> <p>addYears(amount:Int)</p> <p>Adds years, <code>amount</code> may be negative.</p> <p>getSecond():Int</p> <p>Gets the second.</p> <p>getMinute():Int</p> <p>Gets the minute.</p> <p>getHour():Int</p> <p>Gets the hour.</p> <p>getDay():Int</p> <p>Gets the day of the month.</p> <p>getDayOfYear():Int</p> <p>Gets the day of the year.</p> <p>getMonth():Int</p> <p>Gets the month.</p> <p>getYear():Int</p> <p>Gets the year.</p>"},{"location":"reference/types/#date","title":"Date","text":"<p>Represents a date (not including a time). The page input for a Date is a textfield, the expected format is dd/MM/yyyy. The page output for a Date shows the Date formatted with dd/MM/yyyy. Use the format function to customize the output format.</p> <p>The default value for Date properties and variables is null. Note that all Date types are DateTime at run-time.</p> <p>The Date type is compatible with the DateTime and Time types. A Date can be cast to these types.</p>"},{"location":"reference/types/#date-creation-functions_1","title":"Date Creation Functions","text":"<p>Date(String):Date</p> <p>Dates can be constructed using the Date constructor (expected format dd/MM/yyyy):</p> <pre><code>var d : Date := Date(\"04/09/2009\");\n</code></pre> <p>Date(String, String):Date</p> <p>The second parameter represents the date formatting string.</p> <pre><code>var d1 : Date := Date(\"12-20-1990\", \"MM-dd-yyyy\");\n</code></pre> <p>today():Date</p> <p>Creates a Date containing the current day and time 00:00.</p> <p>age(Date):Int</p> <p>Gets the age from a date of birth.</p>"},{"location":"reference/types/#functions_12","title":"Functions","text":"<p>format(formatstring:String):String</p> <p>Format this DateTime using the formatstring. See Java SimpleDateFormat class documentation for formatstring syntax.</p> <p>before(arg:Date/Time/DateTime):Bool</p> <p>Tests whether this date and time is before the arg date and time.</p> <p>after(arg:Date/Time/DateTime):Bool</p> <p>Tests whether this date and time is after the arg date and time.</p> <p>addSeconds(amount:Int)</p> <p>Adds seconds, <code>amount</code> may be negative.</p> <p>addMinutes(amount:Int)</p> <p>Adds minutes, <code>amount</code> may be negative.</p> <p>addHours(amount:Int)</p> <p>Adds hours, <code>amount</code> may be negative.</p> <p>addDays(amount:Int)</p> <p>Adds days, <code>amount</code> may be negative.</p> <p>addMonths(amount:Int)</p> <p>Adds months, <code>amount</code> may be negative.</p> <p>addYears(amount:Int)</p> <p>Adds years, <code>amount</code> may be negative.</p>"},{"location":"reference/types/#time","title":"Time","text":"<p>Represents a time (not including a date). The page input for a Time is a textfield, the expected format is H:mm. The page output for a Time shows the Time formatted with H:mm. Use the format function to customize the output format.</p> <p>The default value for Time properties and variables is null. Note that all Date types are DateTime at run-time.</p> <p>The Time type is compatible with the DateTime and Date types. A Time can be cast to these types.</p>"},{"location":"reference/types/#time-creation-functions","title":"Time Creation Functions","text":"<p>Time(String):Time</p> <p>Time can be constructed using the Time function (expected format H:mm):</p> <pre><code>var t : Time := Time(\"22:08\");\n</code></pre> <p>Time(String, String):Time</p> <p>The second parameter represents the date formatting string.</p> <pre><code>var t1 : Time := Time(\"59:08\", \"mm:H\");\n</code></pre>"},{"location":"reference/types/#functions_13","title":"Functions","text":"<p>format(formatstring:String):String</p> <p>Format this DateTime using the formatstring. See Java SimpleDateFormat class documentation for formatstring syntax.</p> <p>before(arg:Date/Time/DateTime):Bool</p> <p>Tests whether this date and time is before the arg date and time.</p> <p>after(arg:Date/Time/DateTime):Bool</p> <p>Tests whether this date and time is after the arg date and time.</p> <p>addSeconds(amount:Int)</p> <p>Adds seconds, <code>amount</code> may be negative.</p> <p>addMinutes(amount:Int)</p> <p>Adds minutes, <code>amount</code> may be negative.</p> <p>addHours(amount:Int)</p> <p>Adds hours, <code>amount</code> may be negative.</p> <p>addDays(amount:Int)</p> <p>Adds days, <code>amount</code> may be negative.</p> <p>addMonths(amount:Int)</p> <p>Adds months, <code>amount</code> may be negative.</p> <p>addYears(amount:Int)</p> <p>Adds years, <code>amount</code> may be negative.</p>"},{"location":"reference/types/#url","title":"URL","text":"<p>Represents a hyperlink. The page input for a URL is the same as for String. The page output for URL is a hyperlink.</p> <p>Example:</p> <pre><code>var u : URL := \"https://webdsl.org\";\n</code></pre> <p>The default value for URL properties and variables is \"\".</p> <p>The URL type is compatible with the String type, all the String functions can be used, and String literals can be assigned to URL typed vars. A URL can be cast to a String, this is necessary when calling functions or templates with String arguments. For example:</p> <pre><code>function test1(s:String){}\nfunction test2(t: URL){\n  test1(t as String);    \n}\n</code></pre> <p>A String can also be cast to a URL:</p> <pre><code>assert(t == \"https://webdsl.org\" as URL);\n</code></pre>"},{"location":"reference/types/#url-creation-functions","title":"URL Creation Functions","text":"<p>url(arg : String):URL</p> <p>Casts the arg String to a URL type, equivalent to 'arg as URL'. </p> <p>You can also use this in a navigate templatecall in order to provide an absolute URL instead of an internal link.</p> <p>Example:</p> <pre><code>navigate(url(\"https://webdsl.org\")){ \"powered by WebDSL\" }\n</code></pre>"},{"location":"reference/types/#functions_14","title":"Functions","text":"<p>all String functions</p> <p>URL is compatible with String.</p>"},{"location":"reference/types/#file","title":"File","text":"<p>Represents an (uploaded) file. The page input for a File is a file upload component. The page output is a file download link.</p>"},{"location":"reference/types/#functions_15","title":"Functions","text":"<p>fileName():String</p> <p>Returns the name of this file.</p> <p>getContentAsString():String</p> <p>Returns the content of this file as String.</p> <p>download()</p> <p>The current action will result in a download of this file.</p>"},{"location":"reference/types/#image","title":"Image","text":"<p>Represents an (uploaded) image. The page input for an Image is a file upload component. The page output shows the image.</p>"},{"location":"reference/types/#functions_16","title":"Functions","text":"<p>fileName():String</p> <p>Returns the name of this image file.</p> <p>getContentAsString():String</p> <p>Returns the content of this file as String.</p> <p>download()</p> <p>The current action will result in a download of this image file.</p> <p>getWidth()</p> <p>Returns the calculated width of this image.</p> <p>getHeight()</p> <p>Returns the calculated height of this image.</p> <p>resize(maxWidth : Int, maxHeight : Int)</p> <p>Resizes the image to the set dimensions. Note that currently, images can only be downscaled.</p> <p>crop(x : Int, y : Int, width : Int, height : Int)</p> <p>Crops the image to the specified size and coordinates.</p> <p>clone() : Image</p> <p>Makes a copy of the image and returns it.</p>"},{"location":"reference/using-the-editor/","title":"Using the Editor","text":"<p>This is the WebDSL language reference. For more background information on the ideas, architecture, and design decisions behind WebDSL, see the Background section.</p>"},{"location":"reference/using-the-editor/#download-and-installation","title":"Download and Installation","text":"<p>See Install WebDSL.</p>"},{"location":"reference/using-the-editor/#new-project-wizard","title":"New Project Wizard","text":"<p>See Hello World! in WebDSL.</p> <p>The plugin includes a new project wizard which will help you get started using WebDSL:</p> <ul> <li>Right-click in the package explorer and select 'New WebDSL Project' (mostly empty project, shows \u2018hello world\u2019) or \u2018Example WebDSL Project\u2019 (a small example project)</li> <li>Enter project name</li> <li>Select either MySQL or H2 database and enter the required database info (H2 is recommended for first-time users because it doesn\u2019t require extra installation steps).</li> <li>Check \u201coverwrite database when deployed\u201d, \u201cWTP Tomcat\u201d and click Finish (these settings can be easily changed later on by using the \u2018Convert to a WebDSL Project\u2019)</li> <li>The WebDSL project is created, execute the first build (ctrl+alt+b or cmd+alt+b), the application is deployed on an internal Tomcat and the server is started.</li> <li>Go to <code>http://localhost:8080/{projectname}</code> to see the result.</li> <li>Make changes to the app and build the project (ctrl+alt+b or cmd+alt+b), it is automatically deployed.</li> <li>use clean-project.xml to clean the project\u2019s generated files before committing to version control</li> <li>alternatively, switch to deploy to external tomcat setting. Specify the location of tomcat (without \u2026/webapps/), then start tomcat using bin/catalina.sh run (Mac/Linux) or bin/catalina.bat run (Windows).</li> </ul>"},{"location":"reference/using-the-editor/#setting-up-projects-from-version-control-or-repairing-generated-build-files","title":"Setting up projects from version control or repairing generated build files","text":"<p>Use the \u2018Convert to a WebDSL Project\u2019 wizard to regenerate the project build files (this will overwrite the old files, including application.ini).</p>"},{"location":"reference/using-the-editor/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues when running the plugin, here are a few things that you should check or try:</p> <ul> <li>Do you have a Java JDK 6 installed?</li> <li>Have you tried installing the plugin in a clean Eclipse classic distribution?</li> <li>\u201cTransaction not successfully started\u201d error in log -&gt; check db settings in application.ini, see App Configuration</li> <li>\u201cDispatchservlet class not found\u201d -&gt; rebuild the project and check whether automatic project build of eclipse is enabled</li> <li>Currently, renaming the project in eclipse is not fully supported, check .settings/. files and application.ini for project references if you want to rename.</li> <li>\u201cProject Facet Java version 6.0 not supported\u201d error, set Eclipse -&gt; Preferences -&gt; Installed JREs to Java 6 or 1.6</li> <li>Tomcat hangs and shows the following error \u201cjava.lang.OutOfMemoryError: PermGen space\u201d. You can recover from this by killing the Tomcat process (unfortunately it is just listed as \u2018java\u2019) and start it again. To prevent this error or at least postpone it, right click on your project -&gt; Run As -&gt; Run Configurations\u2026 -&gt; click on tomcat instance in tree pane on the left-&gt; click on \u2018Arguments\u2019 tab -&gt; add \u201c-XX:MaxPermSize=512m\u201d to \u2018VM arguments\u2019. Similarly, if Tomcat gives a HeapSpaceError, add \u201c-Xmx1024m\u201d to these options (adjust downwards for low-memory systems).</li> <li>Report issues here: http://yellowgrass.org/project/WebDSL. You can also subscribe to the mailing https://mailman.st.ewi.tudelft.nl/listinfo/webdsl and report your issue, or go to the #webdsl channel on irc.freenode.net</li> </ul>"},{"location":"reference/validation/","title":"Data Validation","text":"<p>Checking user inputs and providing clear feedback is essential for the usability of web applications. WebDSL allows declarative specification of such input validation rules using the validate feature.</p> <p>Validation rules in WebDSL are of the form validate(e,s) and consist of a Boolean expression e to be validated, and a String expression s to be displayed as error message. Any globally visible functions or data can be accessed as well as any of the properties and functions in scope of the validation rule context. </p> <p>Value well-formedness checks (e.g. whether the user enters a valid integer in an Int input) are added automatically to each input field.</p> <p>Validation can be specified on entities in property annotations:</p> <pre><code>entity User { \n  username : String (id, validate(isUniqueUser(this), \"Username is taken\")) \n  password : Secret (validate(password.length() &gt;= 8, \"Password needs to be at least 8 characters\") \n  , validate(/[a-z]/.find(password), \"Password must contain a lower-case character\") \n  , validate(/[A-Z]/.find(password), \"Password must contain an upper-case character\") \n  , validate(/[0-9]/.find(password), \"Password must contain a digit\"))\n  email : Email\n} \nextend entity User { \n  username(validate(isUniqueUser(this),\"Username is taken\")) \n  password(validate(password.length() &gt;= 8, \"Password needs to be at least 8 characters\") \n  ,validate(/[a-z]/.find(password), \"Password must contain a lower-case character\") \n  ,validate(/[A-Z]/.find(password), \"Password must contain an upper-case character\") \n  ,validate(/[0-9]/.find(password), \"Password must contain a digit\")) \n}\n</code></pre> <p>Validation can be specified directly in pages:</p> <pre><code>page editUser( u: User ){ \n  var p: Secret; \n  form { \n    group( \"User\" ){ \n      label( \"Username\" ){ input( u.username ) } \n      label( \"Email\" ){ input( u.email ) } \n      label( \"New Password\" ){ \n        input( u.password )\n      } \n      label( \"Re-enter Password\" ){ \n        input( p ){ \n          validate( u.password == p, \"Password does not match\" ) \n        } \n      } \n      submit action{} { \"Save\" }\n    } \n  }\n}\n</code></pre> <p>Validation can be specified in actions:</p> <pre><code>page createGroup { \n  var ug := UserGroup{}\n  form { \n    group( \"User Group\" ){ \n      label( \"Name\" ){  input( ug.name ) } \n      label( \"Owner\" ){ input( ug.owner ) } \n      submit save() { \"Save\" }\n    }\n  }\n  action save() {\n    validate( ug.owner != null, \"A group must have an owner\" );\n    validate( ug.owner.email != \"\", \"Owner has not provided an email address\" ); \n    ug.save();\n    email newGroupNotify( ug );\n    return userGroup( ug );\n  }\n}\nemail newGroupNotify( u: UserGroup ){\n  from( \"info@example.com\" )\n  to( u.owner.email )\n  subject( \"Usergroup created: ~u.name\" )\n  \"Your usergroup ~u.name has been created.\"\n}\n</code></pre>"},{"location":"reference/validation/#customizing-validation-output","title":"Customizing Validation Output","text":"<p>Validation output can be customized by overriding the templates used to display validation messages. Currently, there are 4 global validation templates:</p> <pre><code>ignore-access-control template errorTemplateInput(messages : [String])\n</code></pre> <p>Displays validation message related to an input.  </p> <pre><code>ignore-access-control template errorTemplateForm(messages : [String])\n</code></pre> <p>Displays validation message for validation in a form.</p> <pre><code>ignore-access-control template errorTemplateAction(messages : [String])\n</code></pre> <p>Displays validation message for validation in an action.</p> <pre><code>ignore-access-control template templateSuccess(messages : [String])\n</code></pre> <p>Displays validation message for success messages.</p> <p>When overriding these validation templates, use an <code>elements</code> templatecall to refer to the element being validated.</p> <p>Example:</p> <pre><code>ignore-access-control template errorTemplateInput(messages : [String]){\n  elements\n  for(ve: String in messages){\n    output(ve)\n  }     \n}\n</code></pre>"},{"location":"reference/validation/#ajax-validation","title":"Ajax Validation","text":"<p>WebDSL provides input components that validate the inputs using ajax.</p> <p>built-in value types:</p> <pre><code>inputajax(String/Secret/URL/Email/Text/WikiText)\ninputajax(Int/Bool/Float/Long)\n</code></pre> <p>reference types:</p> <pre><code>inputajax(Entity / [Entity] / {Entity})\nselectajax(Entity / {Entity})\nradioajax(Entity)\n</code></pre> <p>provide selection options:</p> <pre><code>inputajax(Entity / [Entity] / {Entity}  , [Entity])\nselectajax(Entity / {Entity}            , [Entity])\nradioajax(Entity                        , [Entity])\n</code></pre> <p>Selection options can also be provided using the <code>allowed</code> annotation on an entity property. Example:</p> <pre><code>entity Person{\n  parent : Person (allowed=from Person as p where p != this)\n}\n</code></pre>"},{"location":"reference/webdsl-apps/","title":"WebDSL Apps","text":""},{"location":"reference/webdsl-apps/#the-structure-of-a-webdsl-application","title":"The structure of a WebDSL application","text":"<p>WebDSL application are organized in *.app files. Each .app file has a header, that either declares the name of a module or the name of an application. The declared name should be identical to the filename. Each application needs an .app file that declares the name of the application. This is the name refered to in the application.ini file (see below). </p> <p>An application can be organized in different modules. In a typical .app file the header is followed by a list of import statements, which contain a path to other modules (without extension). In this way your application can be separated over several files, and modules can be reused. </p> <p>Within .app files one can define sections. A section is merely a label to identify the structure of a file. Most section names have no influence on the program itself, some have however, for example in styling definitions.</p> <p>The real contents of a .app file are a list of definitions. This might be page-, template-, action- or entity definitions. Other kinds of definitions might be introduced by WebDSL modules. A module might either refer to a module of an WebDSL application, or to an module of the WebDSL compiler itself. In this case the latter one is refered to. Those definitions will be examined in detail in the next chapters. </p> <p>A very simple application might look like:</p> <p>HelloWorld.app:</p> <pre><code>application HelloWorld\n\nimports MyFirstImport\n\nsection pages\n\npage root () { \n    \"hello world\" \n    IAmImported() \n}\n</code></pre> <p>MyFirstImport.app:</p> <pre><code>module MyFirstImport\n\ntemplate IAmImported() { \n    spacer \n    \"I am imported from a module file\" \n}\n</code></pre> <p>In the second file the section declaration is omitted, since an application may start with a list of declarations as well. The page that is shown when no page is specified (e.g. when visiting http://localhost:8080/yourapp) is named \"root\" and has no arguments.</p>"},{"location":"releases/","title":"WebDSL Releases","text":""},{"location":"releases/#webdsl-plugin-for-eclipse","title":"WebDSL Plugin for Eclipse","text":"<p>Download the latest release of the WebDSL Plugin for Eclipse bundle for your platform:</p> <p> WebDSL in Eclipse bundle (Linux)  WebDSL in Eclipse bundle (MacOS)  WebDSL in Eclipse bundle (Windows)</p> <p>Installation instructions.</p> <p>Or install the WebDSL plugin in an existing Eclipse 3.5+ installation using this update site:</p> <pre><code>https://update.webdsl.org/update\n</code></pre> <p>Installation instructions.</p>"},{"location":"releases/#webdsl-command-line-interface","title":"WebDSL Command-Line Interface","text":"<p>Download the latest release of the WebDSL CLI:</p> <p> WebDSL CLI</p> <p>Installation instructions.</p>"},{"location":"support/","title":"Support","text":"<p>If you need help with installing or using WebDSL, or you are interested in contributing to WebDSL, here is how to get involved:</p>"},{"location":"support/#mailing-list","title":"Mailing list","text":"<p>You can subscribe to the mailing list for asking questions:</p> <p>https://groups.google.com/d/forum/webdsl</p>"},{"location":"support/#issue-tracker","title":"Issue Tracker","text":"<p>Issues are tracked in YellowGrass:</p> <p>http://yellowgrass.org/project/WebDSL</p>"},{"location":"support/#search-the-webdsl-source-code","title":"Search the WebDSL Source Code","text":"<p>The WebDSL repositories are indexed on reposearch:</p> <p>http://codefinder.org/search/WebDSL</p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>This page lists tutorials that take you step-by-step through a project to learn a variety of concepts and aspects of WebDSL in a specific scope. For guides on achieving specific tasks, see the How To's section. For the WebDSL language reference, see the Reference section.</p>"},{"location":"tutorials/#setup-for-the-tutorials","title":"Setup for the Tutorials","text":"<p>Installing WebDSL is necessary to follow the tutorials. Use the installation guide and start to learn by example using the tutorials.</p>"},{"location":"tutorials/#list-of-available-tutorials","title":"List of Available Tutorials","text":"<ul> <li>Hello World</li> <li>Pages and Navigation</li> <li>Templates</li> </ul>"},{"location":"tutorials/hello-world/","title":"Hello World","text":"<p>To create a Hello World application in WebDSL, we have to:</p> <ol> <li>Create a WebDSL project;</li> <li>Output Hello World on the root page;</li> <li>Build and deploy the application.</li> </ol>"},{"location":"tutorials/hello-world/#create-a-new-project","title":"Create a New Project","text":"<p>Open the WebDSL editor and right-click the Package Explorer.</p> <p>Select New WebDSL Project to make the project configuration show up.</p> <p></p> <p>Enter project name: <code>HelloWorld</code> and press Finish.</p>"},{"location":"tutorials/hello-world/#output-hello-world-on-the-root-page","title":"Output Hello World on the Root Page","text":"<p>The generated project contains lots of files but we only need the main application file for this tutorial. Open <code>HelloWorld.app</code> in the root directory of the new project. It should look as follows:</p> <pre><code>application HelloWorld\n\n  page root(){ \"Hello world\" }\n</code></pre>"},{"location":"tutorials/hello-world/#build-and-deploy-the-application","title":"Build and Deploy the Application","text":"<p>To see the resulting web application in the browser, we have to compile and deploy the WebDSL code.</p> <p>Navigate to the project directory in the terminal (e.g. <code>~/eclipse-workspace/HelloWorld/</code>). To compile and run the application in one command, execute <code>webdsl run</code>:</p> <pre><code>$ webdsl run\n# This should start a local web server and generate the following output:\n# ...\n# [ Main | info ] stage 1: parsing HelloWorld.app         [ 0.78s ]\n# ...\n# [ Main | info ] stage 11: writing files                 [ 0.04s ]\n# ...\n# Now compiling generated Java code\n# ...\n# Some file copying\n# ...\n# Some SQL DROP/CREATE table statements\n# ...\n# Some Tomcat commands\n# ...\n# [XX &lt;Month&gt; XX:XX:XX HelloWorld] Tomcat web server started, your web application is available at http://localhost:8080/HelloWorld. Press ctrl+c to stop the web server.\n</code></pre> <p></p> <p>Browsing to <code>http://localhost:8080/HelloWorld/</code> opens the root page of your application and should output Hello world as we specified in <code>HelloWorld.app</code>.</p> <p>To stop the application server, simply press Ctrl+C in the terminal where the app is running.</p>"},{"location":"tutorials/hello-world/#summary","title":"Summary","text":"<p>In this tutorial we created a web application with WebDSL, consisting of a single page that outputs Hello world.</p>"},{"location":"tutorials/pages-and-navigation/","title":"Pages and navigation","text":"<p>In this tutorial we will create an online cookbook. To achieve this, we have to:</p> <ol> <li>Define a homepage;</li> <li>Define a recipe page;</li> <li>Navigate from page to page;</li> <li>Add parameters to the recipe page.</li> </ol>"},{"location":"tutorials/pages-and-navigation/#setup","title":"Setup","text":"<p>We start this tutorial with a project named <code>cookbook</code>. To learn how to set up a WebDSL project, follow our Hello World tutorial.</p>"},{"location":"tutorials/pages-and-navigation/#defining-the-homepage","title":"Defining the Homepage","text":"<p>Our homepage will list all recipes available in the cookbook. Open <code>cookbook.app</code> and change the root page accordingly.</p> <pre><code>application cookbook\n\n  page root() {\n    header { \"Recipes\" }\n\n    list {\n      listitem { \"Lasagne\" }\n      listitem { \"Pancakes\" }\n      listitem { \"Tomato Soup\" }\n    }\n  }\n</code></pre> Built-in templates <p>In the code snippet above, <code>header</code>, <code>list</code> and <code>listitem</code> are templates defined in the <code>built-in.app</code>. <code>header { \"Recipes\" }</code> is syntactic sugar for <code>&lt;h1&gt; \"Recipes\" &lt;/h1&gt;</code>.</p> <p>Once built and ran, the result (visible at <code>http://localhost:8080/cookbook/</code>) is a homepage with the static elements we defined.</p>"},{"location":"tutorials/pages-and-navigation/#adding-a-recipe-page","title":"Adding a Recipe Page","text":"<p>Next, we would like to have an additional page in our application:</p> <pre><code>application cookbook\n\n  page root() {\n    header { \"Recipes\" }\n\n    list {\n      listitem { \"Lasagne\" }\n      listitem { \"Pancakes\" }\n      listitem { \"Tomato Soup\" }\n    }\n  }\n\n  page recipe() {\n    header { \"I'm a recipe!\" }\n  }\n</code></pre> <p>In this updated version, visiting <code>http://localhost:8080/cookbook/</code> will still show the home page as we have seen before. The new recipe page is available on <code>http://localhost:8080/cookbook/recipe</code>.</p>"},{"location":"tutorials/pages-and-navigation/#adding-navigation","title":"Adding Navigation","text":"<p>In our previous build, we have two separate pages but no link from one to the other. To add links to other pages, we can use the <code>navigate</code> construct that WebDSL provides:</p> <pre><code>application cookbook\n\n  page root() {\n    header { \"Recipes\" }\n\n    list {\n      listitem {\n        navigate recipe() { \"Lasagne\" }\n      }\n      listitem {\n        navigate recipe() { \"Pancakes\" }\n      }\n      listitem {\n        navigate recipe() { \"Tomato Soup\" }\n      }\n    }\n  }\n\n  page recipe() {\n    navigate root() { \"Back to homepage\" }\n\n    header { \"I'm a recipe!\" }\n  }\n</code></pre> <p>A <code>navigate</code> call consists of:</p> <ul> <li>A page call (i.e. <code>recipe()</code> in our case)</li> <li>The elements that the link should be on, between brackets (i.e. a single String <code>\"Lasagne\"</code> in our case)</li> </ul> <p>The updated version of our application shows the list items as links to the recipe page, which now also includes a link back to the homepage.</p>"},{"location":"tutorials/pages-and-navigation/#add-page-parameters","title":"Add Page Parameters","text":"<p>The last thing to do, in order to complete our cookbook, is to show which recipe you are currently viewing. In the previous build, we could link from our homepage to the recipe page, but the recipe page was always the same.</p> <p>To make the recipe page aware of the current recipe, we will add a page parameter to its definition, and update the page calls to the recipe page accordingly.</p> <pre><code>application cookbook\n\n  page root() {\n    header { \"Recipes\" }\n\n    list {\n      listitem {\n        navigate recipe(\"Lasagne\") { \"Lasagne\" }\n      }\n      listitem {\n        navigate recipe(\"Pancakes\") { \"Pancakes\" }\n      }\n      listitem {\n        navigate recipe(\"Tomato Soup\") { \"Tomato Soup\" }\n      }\n    }\n  }\n\n  page recipe(name : String) {\n    navigate root() { \"Back to homepage\" }\n\n    header { \"Recipe: ~name\" }\n  }\n</code></pre> String interpolation <p>In the code snippet above, String interpolation (with a tilde <code>~</code>) is used to insert the parameter <code>name</code> in the header: <code>\"Recipe: ~name\"</code>.</p> <p>The updated version of our application passes the recipe name as page pararmeter. This change is reflected in the URL. Instead of <code>http://localhost:8080/cookbook/recipe</code>, the <code>name</code> parameter is now a part of the new URL: <code>http://localhost:8080/cookbook/recipe/&lt;name&gt;</code>.</p>"},{"location":"tutorials/pages-and-navigation/#summary","title":"Summary","text":"<p>In this tutorial, we created an online cookbook using multiple page definitions, page parameters and navigation between pages.</p>"},{"location":"tutorials/templates/","title":"Templates","text":"<p>In this tutorial we will change the online cookbook from previous tutorial to have less code duplication. To achieve this, we have to:</p> <ol> <li>Define a homepage;</li> <li>Define a recipe page;</li> <li>Navigate from page to page;</li> <li>Add parameters to the recipe page.</li> </ol> <p>WORK IN PROGRESS</p>"}]}